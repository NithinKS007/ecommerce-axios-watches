<%- include('../layouts/userLayouts/header') %>
<%- include('../layouts/userLayouts/navbar1') %>

<style>
    body {
        background-color: #f8f9fa;
        color: #212529;
        font-family: 'Arial', sans-serif;
    }
    .card {
        border: 1px solid #dee2e6;
        border-radius: 0.25rem;
        background-color: #fff;
    }
    
    .btn-primary {
        background-color: #000;
        border-color: #000;
        color: #fff;
    }
    
    .btn-primary:hover {
        background-color: #333;
        border-color: #333;
    }
    
    .btn-danger, .btn-warning {
        border-radius: 0.25rem;
    }

    .table thead th {
        background-color: #e9ecef;
        color: #495057;
    }
    
    .table tbody tr:nth-child(even) {
        background-color: #f8f9fa;
    }
    
    .table tbody tr:hover {
        background-color: #e2e6ea;
    }
    
    .product-img {
        max-width: 80px;
        height: auto;
        border-radius: 0.25rem;
    }
    
    .bg-light {
        background-color: #f1f3f5 !important;
    }
    
    .text-muted {
        color: #6c757d !important;
    }
     
    .swal2-cancel {
        width: 100%;
        margin: 5px 0;
        color: #000 !important; 
        border: 1px solid #000  !important; 
        border-radius: 0.25rem  !important; 
    }
    
    .swal2-confirm {
        background-color: #000;
        color: #fff;
        width: 100%;
        margin: 5px 0;
        border: 1px solid #000;
        border-radius: 0.25rem;
    }
    .swal1-cancel {
        width: 100%;
        margin: 5px 0;
        color: #000 !important; 
        border: 1px solid #000  !important; 
        border-radius: 0.25rem  !important; 
    }
    
    .swal1-confirm {
        background-color: #000;
        color: #fff;
        width: 100%;
        margin: 5px 0;
        border: 1px solid #000;
        border-radius: 0.25rem;
    }
    
    @media (max-width: 768px) {
        .swal2-confirm, .swal2-cancel {
            width: 100%;
            margin: 5px 0;
        }
    }
    
    @media (min-width: 769px) and (max-width: 992px) {
        .swal2-confirm, .swal2-cancel {
            width: 150px;
        }
    }
        
    @media (max-width: 768px) {
        .swal1-confirm, .swal1-cancel {
            width: 100%;
            margin: 5px 0;
        }
    }
    
    @media (min-width: 769px) and (max-width: 992px) {
        .swal1-confirm, .swal1-cancel {
            width: 150px;
        }
    }

</style>

<div class="container mb-5" style="margin-top: 15px;">
    <a href="/orders" class="btn btn-back mb-4">
        &larr; Back
    </a>

    <% if (orderData && orderData?.items && orderData?.items?.length > 0) { %>
        <div class="card mb-4 shadow-sm">
            <div class="card-body">
                <div class="row">
                    <div class="col-md-6">
                        <h5 class="card-title">Order #<%= orderData?._id %></h5>
                        <p class="card-text">Placed on: <%= new Date(orderData.orderDate)?.toLocaleDateString() %></p>
                        <p class="card-text">Order Status: <span class="badge bg-<%= orderData?.orderStatus === 'delivered' ? 'success' : 'warning' %>"><%= orderData?.orderStatus?.toUpperCase() %></span></p>
                        <p class="card-text">Payment Method: <%= orderData?.paymentMethod.charAt(0).toUpperCase() + orderData?.paymentMethod.slice(1).toLowerCase() %></p>
                        <p class="card-text">Online Payment Status: <%= transactions?.paymentStatus ? transactions.paymentStatus.charAt(0).toUpperCase() + transactions.paymentStatus.slice(1).toLowerCase() : 'N/A' %></p>
                        <p class="mb-1"><strong>Total:</strong> Rs <%= orderData?.totalAmount %></p>
                    </div>
                </div>
            </div>
        </div>

        <div class="row">
            <div class="col-md-8">
                <div class="card mb-4 shadow-sm">
                    <div class="card-body">
                        <h5 class="card-title">Items in Your Order</h5>
                        <div class="table-responsive">
                            <table class="table">
                                <thead>
                                    <tr>
                                        <th>Product</th>
                                        <th>Quantity</th>
                                        <th>Price</th>
                                        <th>Status</th>
                                        <th>Action</th>
                                    </tr>
                                </thead>
                                <tbody>
                                    <% orderData?.items?.forEach(function(item) { %>
                                        <tr>
                                            <td>
                                                <div class="d-flex align-items-center">
                                                    <% if (item?.images && item?.images?.length > 0) { %>
                                                        <% 
                                                        const fullPath = item?.images[0];
                                                        const filename = fullPath?.split('\\')?.pop()?.split('/')?.pop();
                                                        %>
                                                        <img src="/productImages/<%= filename %>" alt="Product Image" class="product-img me-3">
                                                    <% } else { %>
                                                        <span>No image</span>
                                                    <% } %>
                                                    <div>
                                                        <h6 class="mb-0"><%= item?.productName %></h6>
                                                        <small class="text-muted">Brand: <%= item?.brandName %></small>
                                                    </div>
                                                </div>
                                            </td>
                                            <td><%= item?.quantity %></td>
                                            <td>
                                                <% if (item?.productSalesPriceAfterOfferDiscount !== 0) { %>
                                                    <p class="mb-0">Rs <%= item?.productSalesPriceAfterOfferDiscount %> inc GST</p>
                                                <% } else { %>
                                                    <p class="mb-0">Rs <%= item?.price %> inc GST</p>
                                                <% } %>
                                            </td>
                                            <td>
                                                <p id="orderProductStatus<%= item._id %>" class="order-product-status mb-0">
                                                    <%= item?.orderProductStatus?.charAt(0)?.toUpperCase() + item?.orderProductStatus?.slice(1)?.toLowerCase() %>
                                                </p>
                                            </td>
                                            <td>
                                                <% if (['returnInitiated', 'returnApproved', 'returnRejected'].includes(item.orderProductStatus)) { %>
                                                    <button  id="returnProductButton<%= item?._id %>" class="btn btn-sm return" disabled>Return</button>
                                                <% } else if (item?.orderProductStatus !== 'delivered') { %>
                                                    <button class="btn btn-sm btn-primary"  id="cancelProductButton<%= item?._id %>"
                                                        onclick="cancelProduct('<%= item?._id %>', '<%= orderData?._id %>', '<%= item?.orderProductStatus %>')"
                                                        <%= item?.orderProductStatus === 'cancelled' || transactions?.paymentStatus === 'failed' || transactions?.paymentStatus === 'pending' ? 'disabled' : '' %>>
                                                        <%= item?.orderProductStatus === 'cancelled' ? 'Cancelled' : 'Cancel' %>
                                                    </button>
                                                <% } %>
                                                <!-- return button -->
                                                <% if (item?.orderProductStatus === 'delivered') { %>
                                                    <button  id="returnProductButton<%= item?._id %>" class="btn btn-primary btn-sm" 
                                                        onclick="returnProduct('<%= item?._id %>', '<%= item?.product %>', '<%= orderData?._id %>', '<%= item?.orderProductStatus %>')"
                                                        <%= ['returnInitiated', 'returnApproved', 'returnRejected'].includes(item.orderProductStatus) ? 'disabled' : '' %>>
                                                        Return
                                                    </button>
                                                <% } %>
                                            </td>
                                        </tr>
                                    <% }); %>
                                </tbody>
                            </table>
                        </div>
                    </div>
                </div>
            </div>

            <div class="col-md-4">
                <div class="card mb-4 shadow-sm">
                    <div class="card-body">
                        <h5 class="card-title">Order Summary</h5>
                        <div class="d-flex justify-content-between mb-2">
                            <span>Subtotal:</span>
                            <span>Rs <%= orderData?.subTotalAmount %></span>
                        </div>
                        <div class="d-flex justify-content-between mb-2">
                            <span>Coupon Discount:</span>
                            <span>Rs <%= orderData?.discountAmount %></span>
                        </div>
                        <div class="d-flex justify-content-between mb-2">
                            <span>Total:</span>
                            <span>Rs <%= orderData?.totalAmount %></span>
                        </div>
                        <div class="d-flex justify-content-between mb-2">
                            <span>Payment Method:</span>
                             <%= orderData?.paymentMethod.charAt(0).toUpperCase() + orderData?.paymentMethod.slice(1).toLowerCase() %>

                        </div>
                        <hr>
                        <% const shouldDisableCancelOrder = orderData?.items?.some(item => ['returnInitiated', 'returnApproved', 'returnRejected'].includes(item?.orderProductStatus)|| ['failed', 'pending'].includes(transactions?.paymentStatus)); %>
                        <% if (orderData?.orderStatus !== 'delivered' && orderData?.orderStatus !== 'cancelled') { %>
                            <button class="btn btn-secondary btn-sm" id="generateInvoiceButton" onclick="generatePDF('<%= orderData._id %>')">Invoice</button>

                        <button type="button" class="btn btn-primary btn-lg btn-block" id="cancelOrderButton<%= orderData._id %>" 
                            onclick="cancelOrder('<%= orderData?._id %>', '<%= orderData?.orderStatus %>')"
                            <%= shouldDisableCancelOrder ? 'disabled' : '' %>>
                            Cancel Order
                        </button>
                        <% } else { %>
                            <button class="btn btn-secondary btn-sm" onclick="generatePDF('<%= orderData?._id %>')">Invoice</button>
                             <button class="btn btn-secondary btn-sm" disabled>
                                 <%= orderData?.orderProductStatus === 'cancelled' ? 'Cancelled' : 'Cancel Order' %>

                             </button>
                             
                         <% } %>
                    </div>
                </div>
                <div class="card shadow-sm">
                    <div class="card-body">
                        <h5 class="card-title">Shipping Address</h5>
                        <p class="card-text">
                            Order Date: <%= new Date(orderData?.orderDate)?.toLocaleDateString() %></p>
                            <%= orderData?.shippingAddress?.name %><br>
                            <%= orderData?.shippingAddress?.address %><br>
                            <%= orderData?.shippingAddress?.cityDistTown %>, <%= orderData?.shippingAddress?.state %><br>
                            Pincode: <%= orderData?.shippingAddress?.pincode %><br>
                            Email: <%= orderData?.shippingAddress?.email %><br>
                            Phone: <%= orderData?.shippingAddress?.phone %>
                        </p>
                    </div>
                </div>
            </div>
        </div>
    <% } else { %>
        <p>No orders found.</p>
    <% } %>
</div>
<%- include('../layouts/userLayouts/footer') %>

<script>




function generatePDF(orderId) {
        const { jsPDF } = window.jspdf;
        const doc = new jsPDF();

     
        const companyName = "Axios";
        const companyDetails = [
            "Ernakulam",
            "Maradu",
            "Kochi, Kerala, Zip Code",
            "Phone: (123) 456-7890",
            "Email: axios@company.com"
        ];

     
        const orderTitle = document.querySelector('.card-title')?.textContent || 'Order Details';
        const orderDate = document.querySelector('.card-text')?.textContent || 'Date not available';
        const orderStatus = document.querySelector('.badge')?.textContent || 'Status not available';
        const paymentMethod = document.querySelector('.card-text:nth-child(4)')?.textContent || 'Payment Method not available';
        const totalAmount = document.querySelector('.mb-1 strong')?.nextSibling?.textContent.trim() || 'Total not available';

   
        doc.setFontSize(16);
        doc.text(companyName, 105, 10, { align: 'center' });
        doc.setFontSize(12);

    
        let companyDetailsY = 20;
        companyDetails.forEach((detail) => {
            doc.text(detail, 105, companyDetailsY, { align: 'center' });
            companyDetailsY += 6;
        });


        doc.setDrawColor(0, 0, 0);  
        doc.line(10, companyDetailsY, 200, companyDetailsY);

        doc.setFontSize(14);
        doc.text(orderTitle, 10, companyDetailsY + 10);
        doc.setFontSize(12);
        doc.text( orderDate, 10, companyDetailsY + 20);
        doc.text('Order Status: ' + orderStatus, 10, companyDetailsY + 30);
        doc.text('Payment Method: ' + paymentMethod, 10, companyDetailsY + 40);
        doc.text('Total: ' + totalAmount, 10, companyDetailsY + 50);

        const items = document.querySelectorAll('tbody tr');
        const tableData = [];
        items.forEach((item) => {
            const productName = item.querySelector('h6')?.textContent || 'Product name not available';
            const quantity = item.querySelector('td:nth-child(2)')?.textContent || 'Quantity not available';
            const price = item.querySelector('td:nth-child(3) p')?.textContent || 'Price not available';

            tableData.push([productName, quantity, price]);
        });

        doc.autoTable({
            startY: companyDetailsY + 60,
            head: [['Product Name', 'Quantity', 'Price']],
            body: tableData,
            theme: 'grid',
            styles: { fontSize: 10 },
            headStyles: { fillColor: [0, 0, 0] }, 
            margin: { top: 20 }
        });

      
        doc.save(`Order_${orderId}axios_invoice.pdf`);
    }

    const returnProduct = async (itemId, productId, orderId, orderProductStatus) => {

       

        try {

            const result = await Swal.fire({
                title: 'Return Product',
                html: `
     <select id="returnReason" class="swal2-input" style="width: 100%; padding: 10px; border-radius: 5px; border: 1px solid #ddd; height: 40px;">
        <option value="" disabled selected>Select a reason</option>
        <option value="Defective Product">Defective Product</option>
        <option value="Product not as described">Product not as described</option>
        <option value="Wrong item">Wrong item</option>
        <option value="other">Other</option>
    </select>
`,
                showCancelButton: true,
                icon: 'warning',
                confirmButtonColor: '#000000',
                cancelButtonColor: '#ffffff',
                confirmButtonText: 'Return Product',
                cancelButtonText: 'Cancel',

                customClass: {
                    confirmButton: 'swal2-confirm',
                    cancelButton: 'swal2-cancel'
                },
                preConfirm: () => {
                    const reason = document.getElementById('returnReason').value;
                    if (!reason) {
                        Swal.showValidationMessage('Please select a reason');
                    }
                    return { reason };
                }
            });

            if (result.isConfirmed) {
                const { reason } = result.value;

                const response = await fetch(`http://localhost:7000/return`, {
                    method: "PATCH",
                    headers: {
                        "Content-Type": "application/json"
                    },
                    body: JSON.stringify({ itemId, productId, orderId, orderProductStatus, reason })
                });

                if (!response.ok) {
                    const errorData = await response.json();
                    throw new Error(errorData.error || "Network response was not ok");
                }

                const data = await response.json();

              

                if (data.success) {


                    Swal.fire({
                        icon: 'success',
                        text: 'The product return has been initiated successfully.',
                        toast: true,
                        position: 'top-right',
                        showConfirmButton: false,
                        timerProgressBar: true,
                        timer: 3000
                    });

                    setTimeout(() => {
                        window.location.reload();
                    }, 1000)

                }



            }
        } catch (error) {
            console.log(`Error while returning the product`, error.message);

            await Swal.fire({
                icon: 'error',
                text: `Error: ${error.message}`,
                toast: true,
                position: 'top-right',
                showConfirmButton: false,
                timerProgressBar: true,
                timer: 3000
            });
        }
    };


    const cancelProduct = (itemId, orderId, orderProductStatus) => {

       
        Swal.fire({
            text: "You are about to cancel this product.",
            showCancelButton: true,
            icon: 'warning',
            confirmButtonColor: '#000000',
            cancelButtonColor: '#ffffff',
            confirmButtonText: 'Yes, cancel it!',
            customClass: {
                    confirmButton: 'swal1-confirm',
                    cancelButton: 'swal1-cancel'
                },
        }).then((result) => {

            if (result.isConfirmed) {

                fetch(`http://localhost:7000/orders`, {

                    method: "PATCH",
                    headers: {

                        "Content-Type": "application/json"
                    },

                    body: JSON.stringify({ itemId, orderId, orderProductStatus })

                }).then((response) => {

                    if (!response.ok) {

                        return response.json().then(errorData => {

                            throw new Error(errorData.error || "Network response was not ok");

                        });
                    }

                    return response.json()


                }).then((data) => {

                    console.log(data);

                    if (data.success) {

                        Swal.fire({
                            icon: 'success',
                            text: 'The product has been cancelled successfully.',
                            toast: true,
                            position: 'top-right',
                            showConfirmButton: false,
                            timerProgressBar: true,
                            timer: 3000
                        });

                        setTimeout(() => {

                            window.location.reload()

                        }, 1000)


                    }
                }).catch((error) => {

                    console.log(`you have already cancelled the product,Error while cancelling product`, error.message);

                    Swal.fire({
                        icon: 'error',
                        text: `Error: ${error.message}`,
                        toast: true,
                        position: 'top-right',
                        showConfirmButton: false,
                        timerProgressBar: true,
                        timer: 3000
                    });

                })



            }
        })






    };

    const cancelOrder = (orderId, orderStatus) => {

        

        Swal.fire({
            text: "You are about to cancel this order.",
            icon: 'warning',
            showCancelButton: true,
            confirmButtonColor: '#000000',
            cancelButtonColor: '#ffffff',
            confirmButtonText: 'Yes, cancel it!',
            customClass: {
                    confirmButton: 'swal1-confirm',
                    cancelButton: 'swal1-cancel'
                },
        }).then((result) => {

            if (result.isConfirmed) {


                fetch(`http://localhost:7000/orders`, {

                    method: "PUT",
                    headers: {

                        "Content-Type": "application/json"

                    },
                    body: JSON.stringify({ orderId, orderStatus })

                }).then((response) => {

                    if (!response.ok) {

                        throw new Error("Network response was not ok")
                    }

                    return response.json()

                }).then((data) => {

                 
                    if (data.orderNotDelivered) {

                        Swal.fire({
                            icon: 'success',
                            text: 'The order has been cancelled successfully.',
                            toast: true,
                            position: 'top-right',
                            showConfirmButton: false,
                            timerProgressBar: true,
                            timer: 3000
                        });

                        setTimeout(() => {
                            window.location.reload();
                        }, 1000)


                    }


                }).catch((error) => {

                    console.log(`error while canceling all order at a time`, error.message);

                    Swal.fire({
                        icon: 'error',
                        title: 'Error',
                        text: `Error: ${error.message}`,
                        toast: true,
                        position: 'top-right',
                        showConfirmButton: false,
                        timer: 3000
                    });

                })
            }
        })

    };


</script>