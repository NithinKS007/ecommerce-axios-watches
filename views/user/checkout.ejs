<%- include('../layouts/userLayouts/header') %>
<div class="bg-white sticky-top">
  <!-- Navbar -->
  <nav class="navbar navbar-expand-lg navbar-light bg-white">
    <div class="container">
      <!-- Logo with Dummy Image -->
      <a class="navbar-brand d-flex align-items-center" href="">
        <span style="font-size: 32px; font-weight: bold; color: black"
          >AXIOS</span
        ><sup style="color: black">Â®</sup>
      </a>
      <!-- Search Form -->
      <form
        class="d-flex mx-auto w-50"
        id="searchForm"
        action="/showcase"
        method="GET"
      >
        <input
          class="form-control search-bar"
          style="
            border: none;
            box-shadow: 0px 0px 6px rgba(0, 0, 0, 0.3);

            padding: 20px 15px;
            border-radius: 5px;
            height: 48px;
          "
          type="search"
          name="searchProduct"
          placeholder="Search for items..."
          aria-label="Search"
          value="<%= searchProduct || '' %>"
        />
      </form>

      <!-- Icons -->
      <ul
        style="margin-right: 10px"
        class="navbar-nav mb-2 mb-lg-0 d-flex align-items-center"
      >
        <li class="nav-item me-3">
          <a
            class="nav-link"
            href="/wishlist"
            style="color: black; font-weight: bold; font-size: 24px"
          >
            <i class="fi-rs-heart"></i>
          </a>
        </li>
        <li class="nav-item me-3">
          <a
            class="nav-link"
            href="/cart"
            style="color: black; font-weight: bold; font-size: 24px"
          >
            <i class="fi-rs-shopping-cart"></i>
          </a>
        </li>
        <li class="nav-item me-3">
          <a
            class="nav-link"
            href="/profile"
            style="color: black; font-weight: bold; font-size: 24px"
          >
            <i class="fi-rs-user"></i>
          </a>
        </li>
      </ul>
    </div>
  </nav>

  <div class="container" style="height: 70px">
    <div class="row">
      <div class="col-12 text-center mt-3">
        <ul style="user-select: none" class="list-inline">
          <li class="list-inline-item">
            <a
              href="/showcase?targetGroup=men"
              style="
                color: black;
                font-weight: bold;
                font-size: 20px;
                padding-right: 10px;
              "
              >Mens</a
            >
          </li>
          <li class="list-inline-item">
            <a
              href="/showcase?targetGroup=women"
              style="
                color: black;
                font-weight: bold;
                font-size: 20px;
                padding-right: 10px;
              "
              >Womens</a
            >
          </li>
          <li class="list-inline-item">
            <a
              href="/showcase?targetGroup=kids"
              style="
                color: black;
                font-weight: bold;
                font-size: 20px;
                padding-right: 10px;
              "
              >Kids</a
            >
          </li>
          <li class="list-inline-item">
            <a
              href="/"
              style="
                color: black;
                font-weight: bold;
                font-size: 20px;
                padding-right: 10px;
              "
              >About Us</a
            >
          </li>
          <li class="list-inline-item">
            <a
              href="/"
              style="
                color: black;
                font-weight: bold;
                font-size: 20px;
                padding-right: 10px;
              "
              >Contact</a
            >
          </li>
        </ul>
      </div>
    </div>
  </div>
</div>

<main class="container my-5">
  <div class="row">
    <div class="col-lg-8">
      <p
        style="
          font-family: 'Roboto', sans-serif;
          font-size: 22px;
          font-weight: 500;
          color: #212121;
          margin-bottom: 12px;
          letter-spacing: 0.5px;
        "
      >
        Order Details
      </p>

      <!-- Shipping Address Section -->

      <div class="card shadow-sm mb-4">
        <div class="accordion" id="productAccordion">
          <% selectedItems.forEach((item, index)=> { %>
          <div
            class="accordion-item"
            style="border: none; border-bottom: 1px solid #e0e0e0"
          >
            <h2
              class="accordion-header"
              id="productHeading<%= index %>"
              style="
                background-color: #f5f5f5;
                padding: 15px;
                font-size: 16px;
                font-weight: 600;
                cursor: pointer;
                border-radius: 4px;
              "
            >
              <button
                class="accordion-button collapsed"
                type="button"
                style="
                  background: none;
                  border: none;
                  font-size: 16px;
                  padding: 10px 0;
                  color: #333;
                  text-align: left;
                  width: 100%;
                  box-shadow: none;
                "
                data-bs-toggle="collapse"
                data-bs-target="#productCollapse<%= index %>"
                aria-expanded="false"
                aria-controls="productCollapse<%= index %>"
              >
                <%= item.product.name %>
              </button>
            </h2>
            <div
              id="productCollapse<%= index %>"
              class="accordion-collapse collapse"
              aria-labelledby="productHeading<%= index %>"
              data-bs-parent="#productAccordion"
            >
              <div
                class="accordion-body"
                style="padding: 15px 15px 15px 60px; background-color: #fff"
              >
                <div
                  class="product-details"
                  style="display: flex; align-items: center"
                >
                  <img
                    src="/productImages/<%= item.product.images[0]?.filename %>"
                    alt="Product Image"
                    style="
                      margin-right: 15px;
                      width: 80px;
                      height: 80px;
                      object-fit: cover;
                      margin-right: 20px;
                    "
                  />
                  <div
                    class="product-info"
                    style="font-size: 14px; color: #555"
                  >
                    <p style="margin: 0; padding: 0">
                      <%= item.product.name %>
                    </p>

                    <% if (new
                    Date(item?.product?.productOffer?.offerExpiryDate)> new
                    Date()&&item?.product?.productOffer!==0&&item?.product?.productSalesPriceAfterOfferDiscount&&item?.product?.productOffer?.offerStatus)
                    { %>
                    <strong>Price:</strong>
                    <%= item?.productSalesPriceAfterOfferDiscount.toFixed(3) %>
                    <del> <%= item?.product?.salesPrice.toFixed(3) %> </del>
                    <% } else { %>
                    <strong>Price:</strong>
                    <%= item?.product?.salesPrice.toFixed(3) %> <% } %>
                  </div>
                </div>
              </div>
            </div>
          </div>
          <% }); %>
        </div>
      </div>

      <div class="card-body">
        <button
          id="addAddressButton"
          class="btn btn-outline-primary"
          style="margin-bottom: 10px"
        >
          <i class="bi bi-plus-lg"></i> Add New Address
        </button>
        <div id="addAddressContainer" style="display: none">
          <form id="addAddressForm">
            <div class="mb-3">
              <input
                type="text"
                class="form-control"
                name="name"
                placeholder="Name"
                id="name"
              />
              <span
                id="nameError"
                class="error"
                style="font-size: 0.9rem; color: red"
              ></span>
            </div>
            <div class="mb-3">
              <input
                type="tel"
                class="form-control"
                name="phone"
                id="phone"
                placeholder="10-digit mobile number"
              />
              <span
                id="phoneError"
                class="error"
                style="font-size: 0.9rem; color: red"
              ></span>
            </div>
            <div class="mb-3">
              <input
                type="text"
                class="form-control"
                name="pincode"
                id="pincode"
                placeholder="Pincode"
              />
              <span
                id="pincodeError"
                class="error"
                style="font-size: 0.9rem; color: red"
              ></span>
            </div>
            <div class="row mb-3">
              <div class="col">
                <input
                  type="text"
                  class="form-control"
                  name="locality"
                  id="locality"
                  placeholder="Locality"
                />
                <span
                  id="localityError"
                  class="error"
                  style="font-size: 0.9rem; color: red"
                ></span>
              </div>
              <div class="col">
                <textarea
                  class="form-control"
                  name="address"
                  id="address"
                  rows="3"
                  placeholder="Address (Area and Street)"
                ></textarea>
                <span
                  id="addressError"
                  class="error"
                  style="font-size: 0.9rem; color: red"
                ></span>
              </div>
            </div>
            <div class="row mb-3">
              <div class="col">
                <input
                  type="text"
                  class="form-control"
                  name="cityDistTown"
                  id="cityDistTown"
                  placeholder="City/District/Town"
                />
                <span
                  id="cityDistTownError"
                  class="error"
                  style="font-size: 0.9rem; color: red"
                ></span>
              </div>
              <div class="col">
                <select class="form-select" name="state" id="state">
                  <option value="Andhra Pradesh">Andhra Pradesh</option>
                  <option value="Arunachal Pradesh">Arunachal Pradesh</option>
                  <option value="Assam">Assam</option>
                  <option value="Bihar">Bihar</option>
                  <option value="Chhattisgarh">Chhattisgarh</option>
                  <option value="Goa">Goa</option>
                  <option value="Gujarat">Gujarat</option>
                  <option value="Haryana">Haryana</option>
                  <option value="Himachal Pradesh">Himachal Pradesh</option>
                  <option value="Jharkhand">Jharkhand</option>
                  <option value="Karnataka">Karnataka</option>
                  <option value="Kerala">Kerala</option>
                  <option value="Madhya Pradesh">Madhya Pradesh</option>
                  <option value="Maharashtra">Maharashtra</option>
                  <option value="Manipur">Manipur</option>
                  <option value="Meghalaya">Meghalaya</option>
                  <option value="Mizoram">Mizoram</option>
                  <option value="Nagaland">Nagaland</option>
                  <option value="Odisha">Odisha</option>
                  <option value="Punjab">Punjab</option>
                  <option value="Rajasthan">Rajasthan</option>
                  <option value="Sikkim">Sikkim</option>
                  <option value="Tamil Nadu">Tamil Nadu</option>
                  <option value="Telangana">Telangana</option>
                  <option value="Tripura">Tripura</option>
                  <option value="Uttar Pradesh">Uttar Pradesh</option>
                  <option value="Uttarakhand">Uttarakhand</option>
                  <option value="West Bengal">West Bengal</option>
                </select>
                <span
                  id="stateError"
                  class="error"
                  style="font-size: 0.9rem; color: red"
                ></span>
              </div>
            </div>
            <div class="mb-3">
              <input
                type="text"
                class="form-control"
                name="landMark"
                placeholder="Landmark (Optional)"
              />
            </div>
            <div class="mb-3">
              <input
                type="tel"
                class="form-control"
                name="altPhone"
                placeholder="Alternate Phone (Optional)"
              />
            </div>
            <div class="mb-3">
              <input
                type="email"
                class="form-control"
                name="email"
                id="email"
                placeholder="Email"
              />
              <span
                id="emailError"
                class="error"
                style="font-size: 0.9rem; color: red"
              ></span>
            </div>
            <label class="form-label">Address Type</label>
            <div>
              <div class="form-check form-check-inline">
                <input
                  class="form-check-input"
                  type="radio"
                  name="addressType"
                  id="home"
                  value="home"
                />
                <label class="form-check-label" for="home">Home</label>
              </div>
              <div class="form-check form-check-inline">
                <input
                  class="form-check-input"
                  type="radio"
                  name="addressType"
                  id="work"
                  value="work"
                />
                <label class="form-check-label" for="work">Work</label>
              </div>
              <div class="form-check form-check-inline">
                <input
                  class="form-check-input"
                  type="radio"
                  name="addressType"
                  id="other"
                  value="other"
                />
                <label class="form-check-label" for="other">Other</label>
              </div>
              <span
                id="addressTypeError"
                class="error"
                style="font-size: 0.9rem; color: red"
              ></span>
            </div>
            <button type="submit" class="btn btn-primary">Save Address</button>
            <button
              type="button"
              id="cancelAddAddressFormButton"
              class="btn btn-secondary"
            >
              Cancel
            </button>
          </form>
        </div>

        <% if (address.length===0) { %>
        <div class="alert alert-info" role="alert">
          <strong>No addresses available!</strong> Please add an address to
          proceed with checkout.
        </div>
        <% }else { %>
        <div class="row" id="addressList">
          <div class="col-lg-12">
            <div class="card shadow-sm mb-4">
              <div class="card-body">
                <div id="addressContainer" class="row">
                  <% address.forEach((address, index)=> { %>
                  <div
                    class="col-md-12 mb-3"
                    id="addressSubContainer<%=address._id%>"
                  >
                    <div class="card-body">
                      <div
                        class="d-flex justify-content-between align-items-start"
                      >
                        <div class="form-check flex-grow-1">
                          <input
                            class="form-check-input"
                            type="radio"
                            name="addressSelection"
                            value="<%= index %>"
                            data-address-id="<%= address._id %>"
                          />
                          <label
                            class="form-check-label"
                            for="address_<%= index %>"
                          >
                            <%= address.name %><br />
                            <%= address.address %><br />
                            <%= address.cityDistTown %>, <%= address.state %>
                            <%= address.pincode %><br />
                            Phone: <%= address.phone %>
                          </label>
                        </div>
                        <div class="dropdown dropdown-menu-end">
                          <a href="#" data-bs-toggle="dropdown">
                            <svg
                              xmlns="http://www.w3.org/2000/svg"
                              width="24"
                              height="24"
                              viewBox="0 0 24 24"
                              fill="none"
                              stroke="currentColor"
                              stroke-width="2"
                              stroke-linecap="round"
                              stroke-linejoin="round"
                            >
                              <!-- SVG Path for the three dots icon -->
                              <circle cx="12" cy="5" r="1"></circle>
                              <circle cx="12" cy="12" r="1"></circle>
                              <circle cx="12" cy="19" r="1"></circle>
                            </svg>
                          </a>
                          <div class="dropdown-menu">
                            <a href="/address?view=edit&addressId=<%=address._id%>" class="dropdown-item"
                              >Edit info</a
                            >
                          </div>
                        </div>
                      </div>
                    </div>
                  </div>
                  <% }); %>
                </div>
              </div>
            </div>
          </div>
        </div>

        <% } %>
      </div>
    </div>

    <div class="col-lg-4">
      <!-- Order Summary Section -->
      <div class="card mb-3">
        <div class="card-body">
          <h5 class="card-title">ORDER SUMMARY</h5>
          <p class="card-text d-flex justify-content-between">
            <span id="selection">SubTotal Amount</span>
            <span id="subTotalPrice">Rs <%=subTotal%> </span>
          </p>
          <input
            type="hidden"
            id="couponCode"
            name="couponCode"
            value="<%= couponCode %>"
          />
          <p class="card-text d-flex justify-content-between">
            <span id="selection">Coupon Discount</span>
            <span id="discount">Rs <%=discount%> </span>
          </p>
          <hr />
          <p class="card-text d-flex justify-content-between">
            <strong>Total Amount</strong>
            <strong><span id="totalPrice">Rs <%=finalPrice%> </span></strong>
          </p>
        </div>
      </div>

      <!-- Payment Method Section -->
      <div class="card shadow-sm mb-4">
        <div class="card-body">
          <h3 class="card-title h5 mb-3">Payment Method</h3>

          <div class="form-check mb-2">
            <input
              class="form-check-input"
              type="radio"
              name="payment_method"
              id="razorPay"
              value="razorPay"
            />
            <label class="form-check-label" for="razorPay"> Razor Pay </label>
          </div>
          <div class="form-check">
            <input
              class="form-check-input"
              type="radio"
              name="payment_method"
              id="cashOnDelivery"
              value="cashOnDelivery"
            />
            <label class="form-check-label" for="cashOnDelivery">
              Cash on Delivery
            </label>
          </div>
          <div class="form-check mb-2">
            <input
              class="form-check-input"
              type="radio"
              name="payment_method"
              id="wallet"
              value="wallet"
            />
            <label class="form-check-label" for="wallet"> wallet </label>
          </div>
        </div>
      </div>
      <button
        type="submit"
        class="btn btn-primary btn-lg w-100"
        id="placeOrder"
      >
        Place Order
      </button>
    </div>
  </div>
</main>
<script>
  document.addEventListener("DOMContentLoaded", () => {
    const applySwalButtonStyles = () => {
      const confirmButton = Swal.getConfirmButton();
      const cancelButton = Swal.getCancelButton();

      confirmButton.style.width = "100%";
      confirmButton.style.margin = "5px 0";
      confirmButton.style.border = "1px solid #000";
      confirmButton.style.borderRadius = "0.25rem";
      confirmButton.style.backgroundColor = "#000";
      confirmButton.style.color = "#fff";

      cancelButton.style.width = "100%";
      cancelButton.style.margin = "5px 0";
      cancelButton.style.border = "1px solid #000";
      cancelButton.style.borderRadius = "0.25rem";
      cancelButton.style.color = "#000";

      if (window.innerWidth <= 768) {
        confirmButton.style.width = "100%";
        cancelButton.style.width = "100%";
      } else if (window.innerWidth > 768 && window.innerWidth <= 992) {
        confirmButton.style.width = "150px";
        cancelButton.style.width = "150px";
      }
    };

    //form validation ids for adding new address
    const nameInput = document.getElementById("name");
    const nameError = document.getElementById("nameError");
    const phoneInput = document.getElementById("phone");
    const phoneError = document.getElementById("phoneError");
    const pincodeInput = document.getElementById("pincode");
    const pincodeError = document.getElementById("pincodeError");
    const localityInput = document.getElementById("locality");
    const localityError = document.getElementById("localityError");
    const addressInput = document.getElementById("address");
    const addressError = document.getElementById("addressError");
    const cityDistTownInput = document.getElementById("cityDistTown");
    const cityDistTownError = document.getElementById("cityDistTownError");
    const stateInput = document.getElementById("state");
    const stateError = document.getElementById("stateError");
    const emailInput = document.getElementById("email");
    const emailError = document.getElementById("emailError");
    const addressTypeInputs = document.querySelectorAll(
      'input[name="addressType"]'
    );
    const addressTypeError = document.getElementById("addressTypeError");

    const formAddNewAddress = document.getElementById("addAddressForm");
    const addAddressContainer = document.getElementById("addAddressContainer");
    const addAddressButton = document.getElementById("addAddressButton");
    const cancelAddAddressFormButton = document.getElementById(
      "cancelAddAddressFormButton"
    );
    const addressList = document.getElementById("addressList");

    const validateName = () => {
      if (nameInput.value.trim() === "") {
        nameError.textContent = "* Name is required";
        return false;
      } else if (!/^[a-zA-Z\s]+$/.test(nameInput.value.trim())) {
        nameError.textContent = "* Name must contain only letters";
        return false;
      } else if (nameInput.value.trim().length < 2) {
        nameError.textContent = "* Name must be at least 2 characters long";
        return false;
      } else {
        nameError.textContent = "";
        return true;
      }
    };
    nameInput.addEventListener("input", validateName);

    //mobile validaton

    const validatePhone = () => {
      const phoneRegex = /^\d{10}$/;

      if (phoneInput.value.trim() === "") {
        phoneError.textContent = "* Phone Number is required";
        return false;
      } else if (!phoneRegex.test(phoneInput.value.trim())) {
        phoneError.textContent = "* Enter a valid Phone Number";
        return false;
      } else {
        phoneError.textContent = "";
        return true;
      }
    };

    phoneInput.addEventListener("input", validatePhone);

    //pincode validaton

    const validatePincode = () => {
      const pincodeRegex = /^\d{6}$/;

      if (pincodeInput.value.trim() === "") {
        pincodeError.textContent = "*Pincode is required";
        return false;
      } else if (!pincodeRegex.test(pincodeInput.value.trim())) {
        pincodeError.textContent = "* Enter a valid Pincode";
        return false;
      } else {
        pincodeError.textContent = "";
        return true;
      }
    };

    pincodeInput.addEventListener("input", validatePincode);

    //locality validation

    const validateLocality = () => {
      if (localityInput.value.trim() === "") {
        localityError.textContent = "* Locality is required";
        return false;
      } else if (localityInput.value.trim().length < 5) {
        localityError.textContent =
          "* Locality must be at least 5 characters long";
        return false;
      } else if (!/^[a-zA-Z\s]+$/.test(localityInput.value.trim())) {
        localityError.textContent = "* Locality can only contain letters";
        return false;
      } else {
        localityError.textContent = "";
        return true;
      }
    };

    localityInput.addEventListener("input", validateLocality);

    //address  validation

    const validateAddress = () => {
      if (addressInput.value.trim() === "") {
        addressError.textContent = "* Address is required";
        return false;
      } else if (addressInput.value.trim().length < 5) {
        addressError.textContent =
          "* Address must be at least 5 characters long";
        return false;
      } else {
        addressError.textContent = "";

        return true;
      }
    };
    addressInput.addEventListener("input", validateAddress);

    //cityDistTown  validation

    const validateCityDistTown = () => {
      if (cityDistTownInput.value.trim() === "") {
        cityDistTownError.textContent = "*cityDistTown is required";
        return false;
      } else {
        cityDistTownError.textContent = "";

        return true;
      }
    };
    cityDistTownInput.addEventListener("input", validateCityDistTown);

    //validate state

    const validateState = () => {
      if (stateInput.value === "") {
        stateError.textContent = "* State is required";
        return false;
      } else {
        stateError.textContent = "";
        return true;
      }
    };

    stateInput.addEventListener("change", validateState);

    //email validaton

    const validateEmail = () => {
      const emailRegex = /^[^\s@]+@[^\s@]+\.[^\s@]+$/;

      if (emailInput.value.trim() === "") {
        emailError.textContent = "* Email is required";
        return false;
      } else if (!emailRegex.test(emailInput.value.trim())) {
        emailError.textContent = "* Enter a valid email";
        return false;
      } else {
        emailError.textContent = "";
        return true;
      }
    };

    emailInput.addEventListener("input", validateEmail);

    //address type validation

    const validateAddressType = () => {
      const isChecked = Array.from(addressTypeInputs).some(
        (input) => input.checked
      );
      if (!isChecked) {
        addressTypeError.textContent = "* Address Type is required";
        return false;
      } else {
        addressTypeError.textContent = "";
        return true;
      }
    };
    addressTypeInputs.forEach((input) =>
      input.addEventListener("change", validateAddressType)
    );

    formAddNewAddress.addEventListener("submit", async (event) => {
      event.preventDefault();
      const isNameValid = validateName();
      const isPhoneValid = validatePhone();
      const isPincodeValid = validatePincode();
      const isLocalityValid = validateLocality();
      const isAddressValid = validateAddress();
      const isCityDistTownValid = validateCityDistTown();
      const isStateValid = validateState();
      const isEmailValid = validateEmail();
      const isAddressTypeValid = validateAddressType();

      if (
        !(
          isNameValid &&
          isPhoneValid &&
          isPincodeValid &&
          isLocalityValid &&
          isAddressValid &&
          isCityDistTownValid &&
          isStateValid &&
          isEmailValid &&
          isAddressTypeValid
        )
      ) {
        return;
      } else {
        try {
          const result = await Swal.fire({
            text: "Are you sure? You want to save these changes.",
            showCancelButton: true,
            confirmButtonColor: "#000000",
            cancelButtonColor: "#ffffff",
            confirmButtonText: "Yes, save it!",
            cancelButtonText: "No, cancel!",
            didOpen: () => {
              applySwalButtonStyles();
            },
          });

          if (result.isConfirmed) {
            const address = {
              addressType: document.querySelector(
                'input[name="addressType"]:checked'
              ).value,
              name: nameInput.value.trim(),
              phone: phoneInput.value.trim(),
              address: addressInput.value.trim(),
              locality: localityInput.value.trim(),
              cityDistTown: cityDistTownInput.value.trim(),
              state: stateInput.value,
              pincode: pincodeInput.value.trim(),
              landMark: document
                .querySelector('input[name="landMark"]')
                .value.trim(),
              altPhone: document
                .querySelector('input[name="altPhone"]')
                .value.trim(),
              email: emailInput.value.trim(),
            };

            const response = await fetch(`/address`, {
              method: "POST",
              headers: {
                "Content-Type": "application/json",
              },
              body: JSON.stringify({ address }),
            });

            if (!response.ok) {
              const errorData = await response.json();
              throw new Error(`${errorData.message || "Unknown error"}`);
            }
            const data = await response.json();
            await Swal.fire({
              title: "Success!",
              text: `Address Added successfully`,
              icon: "success",
              toast: true,
              position: "top-right",
              showConfirmButton: false,
              timerProgressBar: true,
              timer: 3000,
            });
            window.location.href = "/checkout";
          }
        } catch (error) {
          console.error("Error adding address", error.message);
          await Swal.fire({
            title: "Error!",
            text: `Error: ${
              error.message || "There was an issue processing your request."
            }`,
            icon: "error",
            toast: true,
            position: "top-right",
            showConfirmButton: false,
            timerProgressBar: true,
            timer: 3000,
          });
        }
      }
    });

    addAddressButton.addEventListener("click", () => {
      addAddressContainer.style.display = "block";
      addressList.style.display = "none";
    });

    cancelAddAddressFormButton.addEventListener("click", () => {
      addAddressContainer.style.display = "none";
      addressList.style.display = "block";
    });

    const razorPay = document.getElementById("razorPay");
    const cashOnDelivery = document.getElementById("cashOnDelivery");
    const wallet = document.getElementById("wallet");
    const placeOrderButton = document.getElementById("placeOrder");

    placeOrderButton.addEventListener("click", () => {
      const paymentFailure = async (response) => {
        try {
          const { payment_id, order_id } = response?.error?.metadata;

          const dataResponse = await fetch("/payments/failure", {
            method: "PATCH",
            headers: {
              "Content-Type": "application/json",
            },

            body: JSON.stringify({ paymentId: payment_id, orderId: order_id }),
          });

          if (!dataResponse.ok) {
            throw new Error(
              "Failed to notify the server about the payment failure"
            );
          }

          const result = await dataResponse.json();

          if (result.success) {
            Swal.fire({
              icon: "error",
              text: "Online Payment failed!",
              toast: true,
              position: "top-right",
              showConfirmButton: false,
              timerProgressBar: true,
              timer: 3000,
            }).then(() => {
              window.location.href = "/payments/failure";
            });
          }
        } catch (error) {
          console.error("Error handling payment failure:", error.message);
          Swal.fire({
            icon: "error",
            text: "payment failure",
            confirmButtonText: "OK",
            confirmButtonColor: "#000000",
          });
        }
      };

      const selectedPaymentMethod = getSelectedPaymentMethod();
      const selectedAddressId = getSelectedAddressId();
      const couponCode = document.getElementById("couponCode").value;

      if (!selectedPaymentMethod && !selectedAddressId) {
        Swal.fire({
          icon: "warning",
          text: "Please select a payment method and address.",
          confirmButtonText: "OK",
          confirmButtonColor: "#000000",
        });
      } else if (!selectedAddressId) {
        Swal.fire({
          icon: "warning",
          text: "Please select an address.",
          confirmButtonText: "OK",
          confirmButtonColor: "#000000",
        });
      } else if (!selectedPaymentMethod) {
        Swal.fire({
          icon: "warning",
          text: "Please select a payment method.",
          confirmButtonText: "OK",
          confirmButtonColor: "#000000",
        });
      } else {
        fetch("/checkout", {
          method: "POST",
          headers: {
            "Content-Type": "application/json",
          },
          body: JSON.stringify({
            paymentMethod: selectedPaymentMethod,
            addressId: selectedAddressId,
            couponCode: couponCode,
          }),
        })
          .then((response) => response.json())

          .then((data) => {
            if (data.success && selectedPaymentMethod !== "razorPay") {
              Swal.fire({
                icon: "success",
                text: "Order successfull!",
                toast: true,
                position: "top-right",
                showConfirmButton: false,
                timerProgressBar: true,
                timer: 3000,
              }).then(() => {
                window.location.href = "/orders/confirmation?view=confirmation";
              });

              return;
            } else if (data.success && selectedPaymentMethod === "razorPay") {
              const options = {
                key: data?.RAZORPAY_ID_KEY,
                amount: data?.amount * 100,
                currency: "INR",
                name: "axios watches",
                order_id: data?.razorPayOrderPaymentId,
                handler: (response) => {
                  verifyOnlinePayment(
                    response?.razorpay_payment_id,
                    response?.razorpay_order_id,
                    response?.razorpay_signature,
                    response?.amount
                  );
                },
              };
              let rzp = new Razorpay(options);

              rzp.on("payment.failed", paymentFailure);
              rzp.open();
            } else {
              Swal.fire({
                icon: "error",
                text: `${data.message}`,
                confirmButtonText: "OK",
                confirmButtonColor: "#000000",
              });
            }
          })
          .catch((error) => {
            Swal.fire({
              icon: "error",
              text: `An error occurred: ${error.message}`,
              confirmButtonText: "OK",
              confirmButtonColor: "#000000",
            });
          });
      }
    });

    const verifyOnlinePayment = (paymentId, orderId, signature, amount) => {
      fetch("/payments/verify", {
        method: "POST",
        headers: {
          "Content-Type": "application/json",
        },
        body: JSON.stringify({ paymentId, orderId, signature, amount }),
      })
        .then((response) => response.json())
        .then((data) => {
          if (data.success) {
            Swal.fire({
              icon: "success",
              text: "Payment successful!",
              toast: true,
              position: "top-right",
              showConfirmButton: false,
              timerProgressBar: true,
              timer: 3000,
            }).then(() => {
              window.location.href = "/orders/confirmation?view=confirmation";
            });
          } else {
            Swal.fire({
              icon: "error",
              text: "Payment verification failed. Please contact support.",
              confirmButtonText: "OK",
              confirmButtonColor: "#000000",
            });
          }
        })
        .catch((error) => {
          console.error("Error:", error);
          Swal.fire({
            icon: "error",
            text: "An error occurred during payment verification.",
            confirmButtonText: "OK",
            confirmButtonColor: "#000000",
          });
        });
    };

    function getSelectedPaymentMethod() {
      if (cashOnDelivery.checked) {
        return cashOnDelivery.value;
      } else if (razorPay.checked) {
        return razorPay.value;
      } else if (wallet.checked) {
        return wallet.value;
      }
      return null;
    }

    function getSelectedAddressId() {
      const addressRadios = document.getElementsByName("addressSelection");
      let selectedAddressId = null;
      addressRadios.forEach((radio) => {
        if (radio.checked) {
          selectedAddressId = radio.getAttribute("data-address-id");
        }
      });

      return selectedAddressId;
    }
  });
</script>
<%- include('../layouts/userLayouts/footer') %>
