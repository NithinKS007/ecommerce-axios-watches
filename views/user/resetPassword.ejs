<%- include('../layouts/adminLayouts/header') %>
  <main class="d-flex align-items-center justify-content-center vh-100">
    <style>
      .error {
        font-size: 0.9rem;
        color: red;
      }
      .small-text {
        font-size: 0.9rem;
        line-height: 1.2;
      }
    </style>
    <section class="content-main">
      <div class="card mx-auto card-login" style="width: 380px">
        <div class="card-body">
          <h4 class="card-title mb-4 text-center">Reset Password</h4>

          <form id="resetPasswordForm">
            <div class="mb-3">
              <input class="form-control" name="newPassword" id="newPassword" placeholder="Enter new password"
                type="password" />
                <span id="newPasswordError" class="error"></span>
            </div>

            <div class="mb-3">
              <input class="form-control" name="confirmPassword" id="confirmPassword" placeholder="Confirm new password"
                type="password"  />
                <span id="confirmPasswordError" class="error"></span>
            </div>
            <input type="checkbox" id="showPassword" style="margin-bottom: 20px;">
            <label  style="margin-bottom: 20px;" for="showPassword" class="small-text">Show Password</label>
            <div class="mb-4">
              <button type="submit" id="resetButton" class="btn btn-primary w-100">
                Reset Password
              </button>
            </div>
          </form>

          <p class="text-center mb-4">
            Remember your password? <a href="/signin">Sign in</a>
          </p>
        </div>
      </div>
    </section>
  </main>

<script>
  document.addEventListener("DOMContentLoaded",()=>{

    const showPasswordCheckbox = document.getElementById('showPassword');

    showPasswordCheckbox.addEventListener('change', function() {
    const passwordType = this.checked ? 'text' : 'password';
    newPasswordInput.type = passwordType;
    confirmPasswordInput.type = passwordType;
  });

    const newPasswordInput = document.getElementById("newPassword");
    const newPasswordError = document.getElementById("newPasswordError");
    const confirmPasswordInput = document.getElementById("confirmPassword");
    const confirmPasswordError = document.getElementById("confirmPasswordError")
    const resetButton = document.getElementById("resetButton")

    resetButton.addEventListener("click",async (event) =>{
      event.preventDefault()
      const isPasswordValid = validatePassword();
      const isCPasswordValid = validateConfirmPassword();

      if(!(isPasswordValid &&isCPasswordValid)){


          return

      }

      const password = newPasswordInput.value;
      const confirmPassword = confirmPasswordInput.value;

      const urlParams = new URLSearchParams(window.location.search);
      const token = urlParams.get('token');
      console.log(`extracted token`,token);
      

      try {
        const response = await fetch("http://localhost:7000/resetPassword", {
          method: "PATCH",
          headers: {
            "Content-Type": "application/json",
          },
          body: JSON.stringify({ password, confirmPassword,token }),
        });

        const data = await response.json();

        if (data.success) {
          Swal.fire({
            icon: 'success',
            text: 'Your password has been reset successfully.',
            timer: 3000,
            timerProgressBar: true,
            toast: true,
            position: 'top-right',
            showConfirmButton: false,
          });

          setTimeout(() => {

            window.location.href = 'http://localhost:7000/signin'

          }, 2000);
        
        } else {
          Swal.fire({
            icon: 'error',
            text: data.message || "An error occurred. Please try again.",
            timer: 3000,
            timerProgressBar: true,
            toast: true,
            position: 'top-right',
            showConfirmButton: false,
          });
        }
      } catch (error) {
        console.error("Error:", error);

        Swal.fire({
          icon: 'error',
          text: 'An error occurred. Please try again.',
          timer: 3000,
          timerProgressBar: true,
          toast: true,
          position: 'top-right',
          showConfirmButton: false,
        });
      }

    })


  const validatePassword = () => {
  const regex = /^(?=.*[a-z])(?=.*[A-Z])(?=.*\d)(?=.*[!@#$%^&*()_+\-=\[\]{};':"\\|,.<>\/?])(?=.{8,})/;

  if (newPasswordInput.value.trim() === '') {
   newPasswordError.textContent = '* Password is required'
    return false;
  } else if (newPasswordInput.value.trim().length < 8) {
    newPasswordError.textContent = '* Password should be at least 8 characters long';
    return false;
  } else if (!regex.test(newPasswordInput.value.trim())) {
   newPasswordError.textContent = 'Password must contain at least one uppercase letter, one lowercase letter, one digit, and one special character';
    return false;
  } else {
   newPasswordError.textContent = '';
    return true;
  }
};
  newPasswordInput.addEventListener('input', validatePassword);

  const validateConfirmPassword = () => {
    if (confirmPasswordInput.value.trim() === '') {
      confirmPasswordError.textContent = '* Confirm Password is required';
      return false;
    } else if (confirmPasswordInput.value.trim().length < 8) {
      confirmPasswordError.textContent = '* Confirm Password should be at least 8 characters long';
      return false;
    } else if (confirmPasswordInput.value !== newPasswordInput.value) {
      confirmPasswordError.textContent = '* Confirm Password must match Password';
      return false;
    } else {
      confirmPasswordError.textContent = '';
      return true;
    }
  };
  confirmPasswordInput.addEventListener('input', validateConfirmPassword);
  })
</script>

  <%- include('../layouts/adminLayouts/footer') %>