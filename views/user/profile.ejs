<%- include('../layouts/userLayouts/header') %> <%- include('../layouts/userLayouts/navbar1') %>

        <style>
            .error {
                font-size: 0.9rem;
                color: red;
            }

            .small-text {
                font-size: 0.9rem;
                line-height: 1.2;
            }



            #userInfoDisplay .dropdown {
                position: absolute;
                top: 0;
                right: 0;
            }
        .swal1-cancel {
        width: 100%;
        margin: 5px 0;
        color: #000 !important; 
        border: 1px solid #000  !important; 
        border-radius: 0.25rem  !important; 
    }
    
    .swal1-confirm {
        background-color: #000;
        color: #fff;
        width: 100%;
        margin: 5px 0;
        border: 1px solid #000;
        border-radius: 0.25rem;
    }
          
    @media (max-width: 768px) {
        .swal1-confirm, .swal1-cancel {
            width: 100%;
            margin: 5px 0;
        }
    }
    
    @media (min-width: 769px) and (max-width: 992px) {
        .swal1-confirm, .swal1-cancel {
            width: 150px;
        }
    }
        </style>
        <main class="main">
            <section class="pt-150 pb-150">
                <div class="container">
                    <div class="row">
                        <div class="col-lg-10 m-auto">
                            <div class="row">
                                <%- include('../layouts/userLayouts/sidebar') %>
                                    <div class="col-md-8">
                                        <div style="
                  background-color: #fff;
                  box-shadow: 0 1px 3px rgba(0, 0, 0, 0.12),
                    0 1px 2px rgba(0, 0, 0, 0.24);
                  border: 1px solid #ddd;
                  border-radius: 8px;
                  padding: 20px;
                  margin-bottom: 20px;
                ">
                                            <h1 style="
                    font-size: 24px;
                    font-weight: bold;
                    color: #333;
                    margin-bottom: 16px;
                  ">
                                                PROFILE
                                            </h1>

                                            <div id="userInfoDisplay" data-user-id="<%= userData._id %>"
                                                data-fname="<%= userData.fname %>" data-lname="<%= userData.lname %>"
                                                data-email="<%= userData.email %>" data-phone="<%= userData.phone %>"
                                                style="position: relative; padding-top: 0px;">
                                                <p id="userName">
                                                    <strong>Name:</strong>
                                                    <%= userData.fname %>
                                                        <%= userData.lname %>
                                                </p>
                                                <p id="userEmail">
                                                    <strong>Email:</strong>
                                                    <%= userData.email %>
                                                </p>
                                                <% if (userData.phone) { %>
                                                    <p id="userPhone">
                                                        <strong>Phone:</strong>
                                                        <%= userData.phone %>
                                                    </p>
                                                    <% } %>

                                                        <!-- Three dots dropdown -->
                                                        <div class="dropdown"
                                                            style="position: absolute; top: 0; right: 0;">
                                                            <a href="#" data-bs-toggle="dropdown">
                                                                <svg xmlns="http://www.w3.org/2000/svg" width="24"
                                                                    height="24" viewBox="0 0 24 24" fill="none"
                                                                    stroke="currentColor" stroke-width="2"
                                                                    stroke-linecap="round" stroke-linejoin="round">
                                                                    <circle cx="12" cy="5" r="1"></circle>
                                                                    <circle cx="12" cy="12" r="1"></circle>
                                                                    <circle cx="12" cy="19" r="1"></circle>
                                                                </svg>
                                                            </a>
                                                            <div class="dropdown-menu dropdown-menu-end">
                                                                <a class="dropdown-item"
                                                                    onclick="editUserDetails()">Edit Details</a>
                                                                <a class="dropdown-item"
                                                                    onclick="editUserPassword('<%= userData._id %>')">Edit
                                                                    Password</a>
                                                            </div>
                                                        </div>


                                            </div>
                                            <!-- edit user details start -->
                                            <div id="editUserForm" style="display: none">
                                                <form id="userDetailsForm">
                                                    <div class="row mb-3">
                                                        <div class="col-md-6">
                                                            <input type="text" id="fnameInput" class="form-control"
                                                                name="fname" placeholder="First Name" />
                                                            <span id="fnameError" class="error"></span>
                                                        </div>
                                                        <div class="col-md-6">
                                                            <input type="text" id="lnameInput" class="form-control"
                                                                name="lname" placeholder="Last Name" />
                                                            <span id="lnameError" class="error"></span>
                                                        </div>
                                                    </div>

                                                    <div class="mb-3">
                                                        <input type="tel" id="phoneInput" class="form-control"
                                                            name="phone" placeholder="Phone Number" />
                                                        <span id="phoneError" class="error"></span>
                                                    </div>



                                                    <button type="submit" id="saveUserNewDetailsButton"
                                                        class="btn btn-primary">
                                                        Save Changes
                                                    </button>
                                                    <button type="button" id="cancelNewUserDetailsButton" class="btn btn-secondary">
                                                        <a href="/profile" style="color: inherit; text-decoration: none; display: block; width: 100%; height: 100%; line-height: inherit;">Cancel</a>
                                                      </button>
                                                      

                                                </form>
                                            </div>
                                            <!-- edit user details ends -->

                                            <!-- edit user password starts -->
                                            <div id="passwordEdit">
                                                <form id="passwordEditForm" style="display: none">
                                                    <div class="mb-3">
                                                        <input type="password" id="existingPassword"
                                                            class="form-control" name="existingPassword"
                                                            placeholder="Current Password" />
                                                        <span id="existingPasswordError" class="error"></span>
                                                    </div>
                                                    <div class="mb-3">
                                                        <input type="password" id="newPassword" class="form-control"
                                                            name="newPassword" placeholder="New Password" />
                                                        <span id="newPasswordError" class="error"></span>
                                                    </div>
                                                    <div class="mb-3">
                                                        <input type="password" id="confirmPassword" class="form-control"
                                                            name="confirmPassword" placeholder="Confirm Password" />
                                                        <span id="confirmPasswordError" class="error"></span>
                                                    </div>

                                                    <button type="submit" id="saveUserNewPasswordButton"
                                                        class="btn btn-primary">
                                                        Save Changes
                                                    </button>
                                                    <button type="button" id="cancelNewPasswordButton" class="btn btn-secondary">
                                                        <a href="/profile" style="color: inherit; text-decoration: none;">Cancel</a>
                                                      </button>
                                                      
                                                </form>
                                            </div>
                                            <!-- edit user password ends -->
                                        </div>
                                    </div>
                            </div>
                        </div>
                    </div>
                </div>
            </section>
        </main>

        <%- include('../layouts/userLayouts/footer') %>

            <script>
                //validation starts for resetting the password
                const existingPasswordInput = document.getElementById("existingPassword");
                const existingPasswordError = document.getElementById("existingPasswordError");
                const newPasswordInput = document.getElementById("newPassword");
                const newPasswordError = document.getElementById("newPasswordError");
                const confirmPasswordInput = document.getElementById("confirmPassword");
                const confirmPasswordError = document.getElementById("confirmPasswordError");

                const userInfoDisplay = document.getElementById("userInfoDisplay");
                const editPasswordForm = document.getElementById("passwordEditForm");
                const saveUserNewPasswordButton = document.getElementById("saveUserNewPasswordButton");

                const validateExistingPassword = () => {

                    const regex = /^(?=.*[a-z])(?=.*[A-Z])(?=.*\d)(?=.*[!@#$%^&*()_+\-=\[\]{};':"\\|,.<>\/?])(?=.{8,})/;
                    if (existingPasswordInput.value.trim() === "") {
                        existingPasswordError.textContent = "* current password is required";
                        return false;
                    }  else if (!regex.test(existingPasswordInput.value.trim())) {
                        existingPasswordError.textContent = 'Existing Password must contain at least one uppercase letter, one lowercase letter, one digit, and one special character';
                        return false;
                    }else if (existingPasswordInput.value.trim().length < 8) {
                        existingPasswordError.textContent =
                            "* current password should be atleast 8 charactors";
                        return false;
                    } else {
                        existingPasswordError.textContent = "";
                        return true;
                    }
                };


                //validation for new password


                const validateNewPassword = () => {

                    const regex = /^(?=.*[a-z])(?=.*[A-Z])(?=.*\d)(?=.*[!@#$%^&*()_+\-=\[\]{};':"\\|,.<>\/?])(?=.{8,})/;

                    if (newPasswordInput.value.trim() === "") {
                        newPasswordError.textContent = "*new password is required";
                        return false;
                    } else if (newPasswordInput.value.trim().length < 8) {
                        newPasswordError.textContent =
                            "* new password should be atleast 8 charactors";
                        return false;
                    } else if (!regex.test(newPasswordInput.value.trim())) {
                        newPasswordError.textContent = 'Password must contain at least one uppercase letter, one lowercase letter, one digit, and one special character';

                        return false

                    } else {
                        newPasswordError.textContent = "";
                        return true;
                    }
                };



                //validation for confirm password field

                const validateConfirmPassword = () => {

                    if (confirmPasswordInput.value.trim() === "") {
                        confirmPasswordError.textContent = "* confirm password is required";
                        return false;
                    } else if (confirmPasswordInput.value.trim().length < 8) {
                        confirmPasswordError.textContent =
                            "* confirm password should be atleast 8 charactors";
                        return false;
                    } else if (confirmPasswordInput.value !== newPasswordInput.value) {
                        confirmPasswordError.textContent =
                            "* Confirm password must match new password";
                        return false;
                    } else {
                        confirmPasswordError.textContent = "";
                        return true;
                    }
                };

                existingPasswordInput.addEventListener("input", validateExistingPassword);
                newPasswordInput.addEventListener("input", validateNewPassword);
                confirmPasswordInput.addEventListener("input", validateConfirmPassword);

                const editUserPassword = (id) => {

                    console.log(`id to edit the password`, id);
                    userInfoDisplay.style.display = "none";
                    editPasswordForm.style.display = "block";



                    saveUserNewPasswordButton.addEventListener("click", (event) => {
                        event.preventDefault();

                        const isValidateExistingPassword = validateExistingPassword()
                        const isValidateNewPassword = validateNewPassword()
                        const isValidateConfirmPassword = validateConfirmPassword()
                        if (!(isValidateExistingPassword && isValidateConfirmPassword && isValidateNewPassword)) {

                            return;

                        }
                        Swal.fire({
                            text: 'Are you sure ? ' + " You want to edit the details.",
        
                            showCancelButton: true,
                            confirmButtonColor: '#000000',
                            cancelButtonColor: '#ffffff',
                            confirmButtonText: 'Yes, edit it!',
                            customClass: {
                                confirmButton: 'swal1-confirm',
                                cancelButton: 'swal1-cancel'
                            },
                        }).then((result) => {

                            if (result.isConfirmed) {
                                const updatedPasswordDetails = {
                                    id,
                                    existingPassword: existingPasswordInput.value,
                                    newPassword: newPasswordInput.value,
                                    confirmPassword: confirmPasswordInput.value,
                                };

                                console.log(`front end password details`, updatedPasswordDetails);
                                fetch(`http://localhost:7000/profile/`, {
                                    method: "PATCH",
                                    headers: {
                                        "Content-Type": "application/json",
                                    },

                                    body: JSON.stringify({ updatedPasswordDetails }),
                                })
                                    .then((response) => {
                                        if (response.status === 401) {
                                            throw new Error("Incorrect existing password");
                                        } else if (response.status === 404) {
                                            throw new Error("User not found");
                                        }

                                        return response.json();
                                    })
                                    .then((data) => {
                                        if (data.success && !data.incorrectPassword) {
                                            console.log(`password edited successfully`);
                                            window.location.reload()
                                            sessionStorage.setItem(`successMessage`, `${data.message}`)
                                            userInfoDisplay.style.display = "block";
                                            editPasswordForm.style.display = "none";
                                        }
                                    })
                                    .catch((error) => {
                                        console.log(`error received`, error.message);
                                        window.location.reload()
                                        sessionStorage.setItem(`errorMessage`, `${error.message}`)
                                        userInfoDisplay.style.display = "block";
                                        editPasswordForm.style.display = "none";
                                    });
                            }

                        })


                    });
                };

                const fnameInput = document.getElementById("fnameInput");
                const lnameInput = document.getElementById("lnameInput");
                const phoneInput = document.getElementById("phoneInput");

                const fnameError = document.getElementById("fnameError");
                const lnameError = document.getElementById("lnameError");
                const phoneError = document.getElementById("phoneError");


                const validateFirstName = () => {
                    if (fnameInput.value.trim() === "") {
                        fnameError.textContent = "* First name is required";
                        return false;
                    } else if (fnameInput.value.trim().length < 2) {
                        fnameError.textContent = '* First Name must be at least 2 characters long';
                        return false;
                    } else if (!/^[a-zA-Z\s]+$/.test(fnameInput.value.trim())) {
                        fnameError.textContent = '* First Name must contain only letters';
                        return false
                    } else {
                        fnameError.textContent = "";
                        return true;
                    }
                };
                const validateLastName = () => {
                    if (lnameInput.value.trim() === "") {
                        lnameError.textContent = "* Last name is required";
                        return false;

                    } else if (lnameInput.value.trim().length < 2) {
                        lnameError.textContent = '* Last Name must be at least 2 characters long';
                        return false;
                    } else if (!/^[a-zA-Z\s]+$/.test(lnameInput.value.trim())) {
                        lnameError.textContent = '* Last Name must contain only letters';
                        return false

                    } else {
                        lnameError.textContent = "";
                        return true;
                    }
                };

                const validatePhone = () => {
                    if (phoneInput.value.trim() === "") {
                        phoneError.textContent = "* Phone number is required";
                        return false;
                    } else if (!/^\d{10}$/.test(phoneInput.value.trim())) {
                        phoneError.textContent = "* Phone number should be 10 digits";
                        return false;
                    } else {
                        phoneError.textContent = "";
                        return true;
                    }
                };

                fnameInput.addEventListener("input", validateFirstName);
                lnameInput.addEventListener("input", validateLastName);
                phoneInput.addEventListener("input", validatePhone);


                const editUserDetails = () => {

                    const userInfo = document.getElementById('userInfoDisplay');

                    const id = userInfo.getAttribute('data-user-id')
                    const firstName = userInfo.getAttribute('data-fname')
                    const lastName = userInfo.getAttribute('data-lname')
                    const phone = userInfo.getAttribute('data-phone')


                    const userInfoDisplay = document.getElementById("userInfoDisplay");

                    const editUserForm = document.getElementById("editUserForm");

                    userInfoDisplay.style.display = "none";
                    editUserForm.style.display = "block";



                    const firstNameInput = document.getElementById("fnameInput");
                    const lastNameInput = document.getElementById("lnameInput");
                    const phoneInput = document.getElementById("phoneInput");

                    firstNameInput.value = firstName || ""
                    lastNameInput.value = lastName || ""
                    phoneInput.value = phone || ""

                    const saveUserNewDetailsButton = document.getElementById("saveUserNewDetailsButton");

                    saveUserNewDetailsButton.addEventListener("click", (event) => {
                        event.preventDefault();

                        const isValidfirstName = validateFirstName()
                        const isValidLastName = validateLastName()
                        const isValidPhone = validatePhone()
                        if (!(isValidfirstName && isValidLastName && isValidPhone)) {

                            return
                        }
                        Swal.fire({
             
                            text: 'Are you sure ? ' + " You want to edit the details.",
                            showCancelButton: true,
                            confirmButtonColor: '#000000',
                            cancelButtonColor: '#ffffff',
                            confirmButtonText: 'Yes',
                            customClass: {
                                    confirmButton: 'swal1-confirm',
                                    cancelButton: 'swal1-cancel'
                                },
                        }).then((result) => {

                            if (result.isConfirmed) {
                                const updatedUserDetails = {
                                    id,
                                    firstName: firstNameInput.value,
                                    lastName: lastNameInput.value,
                                    phone: phoneInput.value,
                                };

                                fetch(`http://localhost:7000/profile/`, {
                                    method: "PUT",
                                    headers: {
                                        "Content-Type": "application/json",
                                    },

                                    body: JSON.stringify({ updatedUserDetails, id }),
                                })
                                    .then((response) => {
                                        if (!response.ok) {
                                            throw new Error("Network response was not ok");
                                        }

                                        return response.json();
                                    })
                                    .then((data) => {
                                        console.log(`received edited data`, data);
                                        if (data.success) {

                                            window.location.reload();

                                            sessionStorage.setItem('successMessage', 'Profile updated successfully!');

                                        } else {

                                            throw new Error(data.message);

                                            sessionStorage.setItem(`errorMessage`, `${data.message}`)
                                        }
                                    })
                                    .catch((error) => {
                                        console.log(`error received editing the data`);

                                        Swal.fire({
                                            title: 'Error!',
                                            text: `Could not update the profile: ${error.message}`,
                                            icon: 'error',
                                            toast: true,
                                            position: 'top-right',
                                            showConfirmButton: false,
                                            timerProgressBar: true,
                                            timer: 3000
                                        });

                                    });
                            }
                        })



                    });
                };

                document.addEventListener('DOMContentLoaded', () => {
                    const successMessage = sessionStorage.getItem('successMessage');
                    const errorMessage = sessionStorage.getItem('errorMessage')

                    if (successMessage) {
                        Swal.fire({
                            title: "Success!",
                            text: successMessage,
                            icon: "success",
                            toast: true,
                            position: 'top-right',
                            showConfirmButton: false,
                            timerProgressBar: true,
                            timer: 3000
                        });


                        sessionStorage.removeItem('successMessage');
                    }
                    if (errorMessage) {
                        Swal.fire({
                            title: "Error",
                            text: errorMessage,
                            icon: "error",
                            toast: true,
                            position: 'top-right',
                            showConfirmButton: false,
                            timerProgressBar: true,
                            timer: 3000
                        });


                        sessionStorage.removeItem('errorMessage');
                    }
                });



            </script>