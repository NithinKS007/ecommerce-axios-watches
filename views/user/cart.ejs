<%- include('../layouts/userLayouts/header') %>
<%- include('../layouts/userLayouts/navbar1') %>
<div class="container mt-5" id="mainContainer">
  <div class="row">
<style>
  
  .modal-content {
  background-color: #f8f9fa;
  border-radius: 10px;
}

.modal-header {
  border-bottom: none;
  padding-bottom: 0;
}

.modal-title {
  font-weight: bold;
  color: #333;
}



.btn-primary {
 
  transition: background-color 0.3s, box-shadow 0.3s;
}

.btn-primary:hover {

  box-shadow: 0 4px 10pxr rgba(0, 0, 0, 0.1);
}

.badge.bg-secondary {

  padding: 0.4em 0.75em;
}
.swal1-cancel {
        width: 100% !important; 
        margin: 5px 0!important;
        color: #000 !important; 
        border: 1px solid #000  !important; 
        border-radius: 0.25rem  !important; 
    }
    
    .swal1-confirm {
        background-color: #000;
        color: #fff;
        width: 100%;
        margin: 5px 0;
        border: 1px solid #000;
        border-radius: 0.25rem;
    }
    @media (max-width: 768px) {
        .swal1-confirm, .swal1-cancel {
            width: 100%;
            margin: 5px 0;
        }
    }
    
    @media (min-width: 769px) and (max-width: 992px) {
        .swal1-confirm, .swal1-cancel {
            width: 150px;
        }
    }

</style>
    <% if (cartDetails.length === 0 || cartDetails[0].items.length === 0) { %>
      <div class="col-12 text-center" >
       
        <h2>Your cart is empty!</h2>
        <p>Add items to it now.</p>
        <a href="/home" class="btn btn-primary">Shop now</a>
      </div>
    <% } else { %>
      <div class="col-md-8" id="sendCartItem">
        <% cartDetails.forEach(cartItem => { %>
          <% cartItem.items.forEach(item => { %>
            <div class="card mb-3" id="productContainer<%= item.product?._id %>">
              <input class="form-check-input" type="checkbox"
                     style="margin-left: 5px;"
                     value="<%= item.product?._id %>"
                     name="selectedCartItem"
                     <% if (item.isSelected) { %> checked <% } %>>
              <div class="row no-gutters">
                <div class="col-md-4 d-flex align-items-center justify-content-center">
                  <img src="/productImages/<%= item.product?.images[0]?.filename %>"
                       class="card-img"
                       style="width: 150px; height: 150px; object-fit: cover; margin-bottom: 15px;"
                       alt="Product Image">
                       <% if (new Date(item?.product?.productOffer?.offerExpiryDate) > new Date() && item?.product?.productOffer?.offerStatus && item?.product?.productSalesPriceAfterOfferDiscount) { %>
                        <div class="position-absolute bg-danger text-white p-1" style="top: 10px; right: 10px; font-size: 0.9em; border-radius: 3px;">
                            <%= item?.product?.productOffer?.offerDiscountPercentage %>% OFF
                        </div>
                    <% } %>
                </div>
                <div class="col-md-8">
                  <div class="card-body">
                    <h5 class="card-title text-truncate" style="max-width: 290px;"><%= item.product?.name %></h5>

                  
                    <% if (new Date(item?.product?.productOffer?.offerExpiryDate) > new Date()&&item?.product?.productOffer!==0&&item?.product?.productSalesPriceAfterOfferDiscount&&item?.product?.productOffer?.offerStatus) { %>
                  
                      <strong>Price:</strong> <%= item?.productSalesPriceAfterOfferDiscount.toFixed(2) %>
                      <del><%= item?.product?.salesPrice.toFixed(2) %></del>
                  <% } else { %>
                    <strong>Price:</strong> <%= item?.product?.salesPrice.toFixed(2) %>
                  <% } %>
                  
                  
                    <div class="d-flex justify-content-between align-items-center">
                      <div class="d-flex align-items-center">
                        <div class="me-2">Qty:</div>
                        <button class="btn btn-sm btn-secondary decrease-quantity" data-product-item-id="<%= item.product?._id %>">-</button>
                        <span class="quantity-display mx-2"><%= item.quantity %></span>
                        <button class="btn btn-sm btn-secondary increase-quantity" data-product-item-id="<%= item.product?._id %>">+</button>
                        <% if (item.product?.stock > 0) { %>
                          <% if (item.product.stock < 3) { %>
                            <span class="product-stock" style="color: red; font-size: 14px; font-weight: 600; margin-left: 5px;">In Stock (<%= item.product.stock %> items)</span>
                          <% } else { %>
                            <span class="product-stock" style="color: green; font-size: 14px; font-weight: 600; margin-left: 5px;">In Stock (<%= item.product.stock %> items)</span>
                          <% } %>
                        <% } else { %>
                          <span class="product-stock" style="color: red; font-size: 14px; font-weight: 600;">Out of Stock</span>
                        <% } %>
                      </div>
                      <span class="text-secondary" onclick="removeFromCart('<%= item.product?._id %>')" style="text-decoration: none; cursor: pointer;margin-bottom: 53px;color: black;">Remove</span>
                    </div>
                  </div>
                </div>
              </div>
            </div>
          <% }); %>
        <% }); %>
      </div>
      
    
    <div class="col-md-4" >
      <div class="card mb-3">

        
        <div class="card-body" >
           
         
          <p class="card-text d-flex justify-content-between">
            <span id="selection"><%=selectedItemsCount%> items selected</span>
            <span id="subTotalPrice">Rs <%= subTotal > 0 ? subTotal.toFixed(2) : '0.00' %></span>
          </p>
          
          <p class="card-text d-flex justify-content-between">
            <span>Delivery Charges</span>
            <span id="deliveryCharge" class="text-success">â‚¹40 Free</span>
          </p>
          <p class="card-text d-flex justify-content-between">
            <span>Coupon Discount</span>
            <span id="couponDiscount" class="text-success">Rs 0.00</span>
          </p>
          <hr>
          <p class="card-text d-flex justify-content-between"style="font-size: 18px;">
            <strong>Total Amount</strong>

            <strong><span id="totalPrice">Rs <%= finalPrice > 0 ? finalPrice.toFixed(2) : '0.00' %></span></strong>

          </p>
          <p style="font-size: 12px; color: #777;">
            (Inclusive of all taxes)
        </p>
        </div>
        <div class="card-body">
      

          <input type="text" id="couponCode"    class="form-control" placeholder="Select a coupon" disabled style="display: none;">

          <button type="button" id="selectCouponButton" class="btn btn-primary btn-md w-100 mt-2" onclick="openCouponModal()">Apply Coupon</button>
          <div id="couponButtons" style="display: none; margin-top: 10px;">
            <div class="row">
             
              <div class="col">
               
                <button type="button" class="btn btn-primary btn-md w-100" onclick="removeCoupon()">Remove</button>
              </div>
            </div>
          </div>
        </div>
        <div class="row">
        <div class="col" id="checkout">
          <button type="button" class="btn custom-button btn-lg w-100" >Check Out</button>

         </div>
        </div>
      </div>
        
      </div>

    
    
    </div>
    
  </div>
 
</div>

<% } %>

<div class="modal fade" id="couponModal" tabindex="-1" aria-labelledby="couponModalLabel" aria-hidden="true">
  <div class="modal-dialog modal-dialog-centered">
    <div class="modal-content">
      <div class="modal-header border-0">
        <h5 class="modal-title" id="couponModalLabel">Available Coupons</h5>
        <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
      </div>
      <div class="modal-body">
        <div class="row">
          <% availableCoupons.forEach(coupon => { %>
            <div class="col-md-6 mb-3">
              <div class="card h-100 shadow-sm border-0">
                <div class="card-body d-flex flex-column justify-content-between">
                  <div>
                    <h6 class="card-title text-dark">
                      <i class="bi bi-ticket-fill me-2"></i> 
                      <%= coupon.couponName %>
                    </h6>                    
                    <p class="card-text">
                      <strong>Discount:</strong> <%= coupon.couponDiscount %>% 
                    </p>
                    <p class="card-text">
                      <strong>Min Amount:</strong> <%= coupon.minAmount %> Rs
                    </p>
                    <p class="card-text">
                      <strong>Max Discount Amount:</strong> <%= coupon.maxAmount %> Rs
                    </p>
                    <p class="card-text">
                      <strong>Code:</strong> <span class="badge bg-secondary"><%= coupon.couponCode %></span>
                    </p>
                  </div>
                  <button type="button" class="btn btn-primary btn-sm mt-2" onclick="selectCoupon('<%= coupon.couponCode %>','<%= coupon.couponDiscount %>')">
                    <i class="bi bi-check-circle me-1"></i> Apply
                  </button>
                </div>
              </div>
            </div>
          <% }); %>
        </div>
      </div>
    </div>
  </div>
</div>



<div id="preloader-active">
  <div class="preloader d-flex align-items-center justify-content-center">
      <div class="preloader-inner position-relative">
          <div class="text-center">
              <h5 class="mb-5">Now Loading</h5>
              <div class="loader">
                  <div class="bar bar1"></div>
                  <div class="bar bar2"></div>
                  <div class="bar bar3"></div>
              </div>
          </div>
      </div>
  </div>
</div>

<script>

const openCouponModal = () => {

 const selectedItemsCount = document.querySelectorAll('input[name="selectedCartItem"]:checked').length;

if (selectedItemsCount === 0) {
  Swal.fire({
    icon: 'warning',
    text: 'Please select at least one item to select a coupon.',
   toast: true,
   position: 'top-right',
   showConfirmButton: false,
   timerProgressBar: true,
   timer: 3000
  });
  return; // Exit the function early if no items are selected
}
    const couponModal = new bootstrap.Modal(document.getElementById('couponModal'));
    couponModal.show();
  };

  // Function to select a coupon
  const selectCoupon = async(couponCode) => {
  
    document.getElementById('couponCode').value = couponCode ;
    document.getElementById('selectCouponButton').style.display = 'none';
    document.getElementById('couponButtons').style.display = 'block';

    // Close the modal after selecting a coupon
    const couponModal = bootstrap.Modal.getInstance(document.getElementById('couponModal'));
    couponModal.hide();
    await applyCoupon();
  };

  //for removing the coupon amount
  const removeCoupon = async () => {
  document.getElementById('couponCode').value = '';
  document.getElementById('selectCouponButton').style.display = 'block';
  document.getElementById('couponButtons').style.display = 'none';

  try {
    const response = await fetch(`http://localhost:7000/cart/removeCoupon`, {
      method: 'DELETE',
      headers: {
        'Content-Type': 'application/json'
      }
    });

    if (!response.ok) {
      throw new Error('Network response was not ok');
    }

    const data = await response.json();

    if (data) {
 
      console.log('Coupon removed successfully:', data);
      document.getElementById('subTotalPrice').innerText = `Rs ${data.subTotal.toFixed(2)}`;
      document.getElementById('totalPrice').innerText = `Rs ${data.finalPrice.toFixed(2)}`;
      document.getElementById('couponDiscount').innerText = `Rs ${data.discount.toFixed(2)}`
      Swal.fire({
              icon: 'success',
              text: 'Coupon removed successfully.',
              toast: true,
              position: 'top-right',
              showConfirmButton: false,
              timerProgressBar: true,
              timer: 3000
            });
    }
  } catch (error) {

    console.error('There was a problem with the fetch operation:', error);
    Swal.fire({
          icon: 'error',
          text: 'An error occurred while removing the coupon.',
          toast: true,
          position: 'top-right',
          showConfirmButton: false,
          timerProgressBar: true,
          timer: 3000
        });

  }
};



  //for adding the coupon amount
const applyCoupon= async () =>{

  const couponCodeElement = document.getElementById('couponCode');
  console.log('Coupon Code Element:', couponCodeElement);
  const couponCode = couponCodeElement ? couponCodeElement.value : '';
  console.log('Coupon Code:', couponCode);
    try {
        const response = await fetch(`http://localhost:7000/cart/applyCoupon`, {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json'
            },
            body: JSON.stringify({ couponCode })
        });

        const data = await response.json();

        if (data.success) {
            document.getElementById('subTotalPrice').innerText = `Rs ${data.subTotal.toFixed(2)}`;
            document.getElementById('totalPrice').innerText = `Rs ${data.finalPrice.toFixed(2)}`;
            document.getElementById('couponDiscount').innerText = `Rs ${data.discount.toFixed(2)}`

            document.getElementById('couponButtons').style.display = 'block';

            Swal.fire({
              icon: 'success',
              text: 'Coupon applied successfully.',
              toast: true,
              position: 'top-right',
              showConfirmButton: false,
              timerProgressBar: true,
              timer: 3000
            });
        } else {
            Swal.fire({
                icon: 'error',
                text: data.message,
                toast: true,
                position: 'top-right',
                showConfirmButton: false,
                timerProgressBar: true,
                timer: 3000
            });
        }
    } catch (error) {

        console.error('Error applying coupon:', error);

        Swal.fire({
          icon: 'error',
          text: 'An error occurred while applying the coupon.',
          toast: true,
          position: 'top-right',
          showConfirmButton: false,
          timerProgressBar: true,
          timer: 3000
        });

    }
}

  const removeFromCart = (productId) =>{

    Swal.fire({
      text: 'Are you sure ? ' + 'You want remove the item',
      showCancelButton: true,
      confirmButtonColor: '#000000',
      cancelButtonColor: '#ffffff',
      confirmButtonText: 'Yes, Remove',
      cancelButtonText: 'No, cancel!',
      customClass: {
                    confirmButton: 'swal1-confirm',
                    cancelButton: 'swal1-cancel'
                },

    }).then((result)=>{

      if(result.isConfirmed){

        const couponCodeElement = document.getElementById('couponCode');
        const couponCode = couponCodeElement ? couponCodeElement.value : ''; 

        console.log(`front`, productId);
        console.log('Coupon Code:', couponCode);
        const productContainer = document.getElementById(`productContainer${productId}`)
   
   const mainContainer = document.getElementById(`mainContainer`)

   console.log(productContainer);

    fetch(`http://localhost:7000/cart/`,{

      method:"DELETE",
      headers:{

        "Content-Type":"application/json"

      },

      body:JSON.stringify({productId,couponCode})

    }).then((response)=>{

      if(!response.ok){

        throw new Error("Network response was not ok")
        
      }

      return response.json()

    }).then((data)=>{
      console.log('Fetch response data:', data);
     let productName = data.productName.name
      
    if(data.isEmpty){

      if (mainContainer) {
            mainContainer.remove();
            
            
            const emptyCartMessage = document.createElement('div');
            emptyCartMessage.className = 'col-12 text-center';
            emptyCartMessage.innerHTML = `
                <h2>Your cart is empty!</h2>
                <p>Add items to it now.</p>
                <a href="/home" class="btn btn-primary">Shop now</a>`;
            document.body.appendChild(emptyCartMessage);
          }

         
          Swal.fire({
            icon: 'success',
            text: `Successfully removed ${productName} from your cart`,
            toast: true,
            position: 'top-right',
            showConfirmButton: false,
            timerProgressBar: true,
            timer: 3000
          }).then(() => {
            window.location.reload();
          });
      
    }else{


      if (productContainer) productContainer.remove();
       Swal.fire({
              icon: 'success',
              text: `Successfully removed ${productName} from your cart`,
              toast: true,
              position: 'top-right',
              showConfirmButton: false,
              timerProgressBar: true,
              timer: 3000
            });


        }
        const subTotalPrice = document.getElementById('subTotalPrice');
        const totalPrice = document.getElementById('totalPrice');
        const selection = document.getElementById('selection')
        const discount = document.getElementById('couponDiscount')

        if (subTotalPrice) subTotalPrice.innerHTML = `Rs ${data.subTotal ? data.subTotal : 0}`;
       
        if (totalPrice) totalPrice.innerHTML = `Rs ${data.finalPrice ? data.finalPrice : 0}`;
        
        if (selection) {
          const selectedItemsCount = data.cartDetails.items.filter(item => item.isSelected).length;
          selection.innerHTML = `${selectedItemsCount ? `${selectedItemsCount} items selected` : 'No items selected'}`;
        }

        if(data.discount===0&&data.subTotal===data.finalPrice&& discount &&  discount.value!== ''  && couponCodeElement.value !== ''){

          discount.innerHTML = `Rs ${data.discount? data.discount:0}`
          couponCodeElement.value = '';
          document.getElementById('selectCouponButton').style.display = 'block';
          document.getElementById('couponButtons').style.display = 'none';
        }

    }).catch(error=>{

      console.log(`error while fetching the data`,error.message);

      Swal.fire({
            icon: 'error',
            text: 'An error occurred while removing the item',
            toast: true,
            position: 'top-right',
            showConfirmButton: false,
            timerProgressBar: true,
            timer: 3000
          });
       })

      }

    })

   
    
  }

const decreaseButtons = document.querySelectorAll('.decrease-quantity');
const increaseButtons = document.querySelectorAll('.increase-quantity');

function updateQuantity(productId, newQuantity) {

  const checkbox = document.querySelector(`input[value="${productId}"]`);
  if (!checkbox.checked) {
    Swal.fire({
      icon: 'warning',
      text: 'You can only update the quantity of selected products',
      toast: true,
      position: 'top-right',
      showConfirmButton: false,
      timerProgressBar: true,
      timer: 3000
    });
    return;
  }
  if (newQuantity >= 1 && newQuantity <= 5) {

    const  couponCode =  document.getElementById('couponCode').value 
    const subTotalPrice = document.getElementById('subTotalPrice');
    const totalPrice = document.getElementById('totalPrice');
    const discount = document.getElementById('couponDiscount')
    const checkbox = document.querySelector(`input[value="${productId}"]`);

    fetch(`http://localhost:7000/cart/`, {
      method: 'PATCH',
      headers: {
        "Content-Type": "application/json",
      },
      body: JSON.stringify({ productId, quantity: newQuantity,couponCode }),
    }).then((response) => {
      if (!response.ok) {
        throw new Error("Network response was not ok");
      }
      return response.json();
    }).then((data) => {
      if (data.success) {
        subTotalPrice.innerHTML = `Rs ${data.subTotal ? data.subTotal : 0}`;
        totalPrice.innerHTML = `Rs ${data.finalPrice ? data.finalPrice : 0}`;
        discount.innerHTML = `Rs ${data.discount ? data.discount : 0}`

        // Update the quantity display
        const quantityDisplay = document.querySelector(`[data-product-item-id="${productId}"]`).nextElementSibling;
        quantityDisplay.textContent = newQuantity;
    
      } else if (data.quantity === false) {
        Swal.fire({
          icon: 'warning',
          text: 'Stock is insufficient',
          toast: true,
          position: 'top-right',
          showConfirmButton: false,
          timerProgressBar: true,
          timer: 3000
        });
      }
    }).catch(error => {
      Swal.fire({
        icon: 'error',
        text: `An error occurred: ${error.message}`,
        toast: true,
        position: 'top-right',
        showConfirmButton: false,
        timerProgressBar: true,
        timer: 3000
      });
    });
  } else {
    Swal.fire({
      icon: 'warning',
      text: 'You can only select up to 5 items at a time',
      toast: true,
      position: 'top-right',
      showConfirmButton: false,
      timerProgressBar: true,
      timer: 3000
    });
  }
}

function handleQuantityChange(action, button) {
  const productId = button.getAttribute('data-product-item-id');
  
  const quantityDisplay = action === 'decrease' ? button.nextElementSibling : button.previousElementSibling;
  const currentQuantity = parseInt(quantityDisplay.textContent);
  const newQuantity = action === 'decrease' ? currentQuantity - 1 : currentQuantity + 1;

  if (newQuantity >= 1 && newQuantity <= 5) {
    updateQuantity(productId, newQuantity);
  } else {
    Swal.fire({
  icon: 'info',
  text: 'Quantity must be 1 - 5',
  toast: true,
  position: 'top-right',
  showConfirmButton: false,
  timerProgressBar: true,
  timer: 3000
});

  }
}

decreaseButtons.forEach(button => {
  button.addEventListener("click", () => handleQuantityChange('decrease', button));
});

increaseButtons.forEach(button => {
  button.addEventListener("click", () => handleQuantityChange('increase', button));
});


//selecting the checked box items and sending that data to backend
let selectedProductIds = [];

const updateSelectedProducts = () => {
  const checkboxes = document.querySelectorAll('input[name="selectedCartItem"]');

  selectedProductIds = Array.from(checkboxes)
    .filter(checkbox => checkbox.checked)
    .map(checkbox => checkbox.value);
   
    sendToBackend();
    if (selectedProductIds.length === 0) {
      const subTotalPrice = document.getElementById('subTotalPrice');
      const totalPrice = document.getElementById('totalPrice');
      const selection = document.getElementById('selection')
    subTotalPrice.innerHTML = "Rs 0.00";
    totalPrice.innerHTML = "Rs 0.00";
    selection.innerHTML = `0 items selected`;
  }
  
};


document.querySelectorAll('input[name="selectedCartItem"]').forEach(checkbox => {

  checkbox.addEventListener('change', updateSelectedProducts);
 
 
});


const sendToBackend = () => {

 const subTotalPrice = document.getElementById('subTotalPrice')
 const discount = document.getElementById('couponDiscount')
 const deliveryCharge = document.getElementById('deliveryCharge')
 const totalPrice = document.getElementById('totalPrice')
 const selection = document.getElementById('selection')
 const  couponCode =  document.getElementById('couponCode').value 

  fetch('http://localhost:7000/cart/', {

    method: 'PATCH',
    headers: {
      'Content-Type': 'application/json',
    },
    body: JSON.stringify({ selectedProductIds,couponCode }),

  }).then((response)=>{

      if(!response.ok){

        throw new Error("Network response was not ok");

      }
      return response.json();
    }).then((data)=>{
  
    
      
      if (data.finalPrice && data.cartDetails && data.cartDetails.items) {
      subTotalPrice.innerHTML = `Rs ${data.subTotal? data.subTotal : 0}`;
      totalPrice.innerHTML = `Rs ${data.finalPrice ? data.finalPrice : 0}`;
      discount.innerHTML = `Rs ${data.discount ? data.discount  : 0}`
      const selectedItemsCount = data.cartDetails.items.filter(item => item.isSelected).length;
      selection.innerHTML = `${selectedItemsCount ? `${selectedItemsCount} items selected `: 'No items selected'}`;
      
       
}
    }).catch((error)=>{

      Swal.fire({
      icon: 'error',
      title: 'Error',
      text: `An error occurred: ${error.message}`,
      toast: true,
      position: 'top-right',
      showConfirmButton: false,
      timerProgressBar: true,
      timer: 3000
    });

    })
};

document.addEventListener("DOMContentLoaded", function() {
    const checkboxes = document.querySelectorAll('.form-check-input');
    const checkoutButton = document.getElementById('checkout');
    let values = [];

    checkboxes.forEach(function(checkbox) {
        handleCheckboxChange(checkbox);

        checkbox.addEventListener('change', function() {
            handleCheckboxChange(this);
        });
    });

    function handleCheckboxChange(checkbox) {
        const value = checkbox.value;

        if (checkbox.checked) {
            if (!values.includes(value)) {
                values.push(value);
            }
        } else {

            values = values.filter(v => v !== value);
        }

        console.log(values);

     
        checkoutButton.removeEventListener("click", handleCheckoutClick);
        checkoutButton.removeEventListener("click", handleNoSelection);

        if (values.length > 0) {
            checkoutButton.addEventListener("click", handleCheckoutClick);
        } else {
            checkoutButton.addEventListener("click", handleNoSelection);
        }
    }

    function handleCheckoutClick() {

      const couponCodeInput = document.getElementById('couponCode');
    const couponCode = couponCodeInput.value;
    
    const encodedCouponCode = encodeURIComponent(couponCode);
    
    const checkoutUrl = `http://localhost:7000/checkout?couponCode=${encodedCouponCode}`;
    
    window.location.href = checkoutUrl;

    }

    function handleNoSelection(event) {
        event.preventDefault();
        Swal.fire({
        icon: 'warning',
        text: 'Please select at least one item before proceeding.',
        toast: true,
        position: 'top-right',
        showConfirmButton: false,
        timerProgressBar: true,
        timer: 3000
      }); 
    }
});



</script>
  <!-- Vendor JS -->
  <script src="assets/js/vendor/modernizr-3.6.0.min.js"></script>
  <script src="assets/js/vendor/jquery-3.6.0.min.js"></script>
  <script src="assets/js/vendor/jquery-migrate-3.3.0.min.js"></script>
  <script src="assets/js/vendor/bootstrap.bundle.min.js"></script>
  <script src="assets/js/plugins/slick.js"></script>
  <script src="assets/js/plugins/jquery.syotimer.min.js"></script>
  <script src="assets/js/plugins/wow.js"></script>
  <script src="assets/js/plugins/jquery-ui.js"></script>
  <script src="assets/js/plugins/perfect-scrollbar.js"></script>
  <script src="assets/js/plugins/magnific-popup.js"></script>
  <script src="assets/js/plugins/select2.min.js"></script>
  <script src="assets/js/plugins/waypoints.js"></script>
  <script src="assets/js/plugins/counterup.js"></script>
  <script src="assets/js/plugins/jquery.countdown.min.js"></script>
  <script src="assets/js/plugins/images-loaded.js"></script>
  <script src="assets/js/plugins/isotope.js"></script>
  <script src="assets/js/plugins/scrollup.js"></script>
  <script src="assets/js/plugins/jquery.vticker-min.js"></script>
  <script src="assets/js/plugins/jquery.theia.sticky.js"></script>
  <!-- Template  JS -->
  <script src="./assets/js/main.js?v=3.4"></script>
  <script src="./assets/js/shop.js?v=3.4"></script> 

    <!-- sweet alert js file from the installed npm install sweetalert2 library -->
  <script src="/modules/sweetalert2/dist/sweetalert2.min.js"></script>
</body>

</html>