<%- include('../layouts/userLayouts/header') %>
<%- include('../layouts/userLayouts/navbar1') %>
<style>
    .error {
        font-size: 0.9rem;
        color: red;
    }

    .small-text {
        font-size: 0.9rem;
        line-height: 1.2;
    }
    .swal1-cancel {
        width: 100%;
        margin: 5px 0;
        color: #000 !important; 
        border: 1px solid #000  !important; 
        border-radius: 0.25rem  !important; 
    }
    
    .swal1-confirm {
        background-color: #000;
        color: #fff;
        width: 100%;
        margin: 5px 0;
        border: 1px solid #000;
        border-radius: 0.25rem;
    }
    @media (max-width: 768px) {
        .swal1-confirm, .swal1-cancel {
            width: 100%;
            margin: 5px 0;
        }
    }
    
    @media (min-width: 769px) and (max-width: 992px) {
        .swal1-confirm, .swal1-cancel {
            width: 150px;
        }
    }
    </style>
<main class="main">
    <section class="pt-150 pb-150">
        <div class="container">
            <div class="row">
                <div class="col-lg-10 m-auto">
                    <div class="row">
                        <%- include('../layouts/userLayouts/sidebar') %>
                        <div class="col-md-8">
                            <div class="container mt-5">
                                <h3 style="font-size: 24px; font-weight: bold; color: #333; ">MANAGE YOUR ADDRESS</h3>


                                <br>
                                
                                <div class="d-flex justify-content-start mb-3">
                                    <a href="/addAddress" class="btn btn-outline-primary" style="text-decoration: none;">
                                        Add a New Address
                                    </a>
                                </div>










                                <div id="editAddressForm" style="display: none;">
                                    <form id="newAddressForm" >
                                        <input type="hidden"  value="address">
                                        <div class="mb-3">
                                            <input type="text" id="addressNameInput" class="form-control" name="name" placeholder="Name" >
                                            <span id="editNameError" class="error"></span>
                                        </div>
                                        <div class="mb-3">
                                            <input type="tel" id="addressPhoneInput" class="form-control" name="phone" placeholder="10-digit mobile number" >
                                            <span id="editPhoneError" class="error"></span>
                                        </div>
                                        <div class="mb-3">
                                            <input type="text" id="addressPincodeInput" class="form-control" name="pincode" placeholder="Pincode" >
                                            <span id="editPincodeError" class="error"></span>
                                        </div>
                                        <div class="row mb-3">
                                            <div class="col">
                                                <input type="text" id="addressLocalityInput" class="form-control" name="locality" placeholder="Locality" >

                                                <span id="editLocalityError" class="error"></span>
                                            </div>
                                            <div class="col">
                                                <textarea class="form-control" id="addressTextAreaInput" name="address" rows="3" placeholder="Address (Area and Street)" ></textarea>

                                                <span id="editAddressError" class="error"></span>
                                            </div>
                                        </div>
                                        <div class="row mb-3">
                                            <div class="col">
                                                <input type="text" class="form-control" id="addressCityDistTownInput" name="cityDistTown" placeholder="City/District/Town" >
                                                <span id="editCityDistTownError" class="error"></span>
                                            </div>
                                            <div class="col">
                                                <select class="form-select" id="addressStateInput" name="state" >
                                                    <option selected disabled>--Select State--</option>
                                                    <option value="Andhra Pradesh">Andhra Pradesh</option>
                                                    <option value="Arunachal Pradesh">Arunachal Pradesh</option>
                                                    <option value="Assam">Assam</option>
                                                    <option value="Bihar">Bihar</option>
                                                    <option value="Chhattisgarh">Chhattisgarh</option>
                                                    <option value="Goa">Goa</option>
                                                    <option value="Gujarat">Gujarat</option>
                                                    <option value="Haryana">Haryana</option>
                                                    <option value="Himachal Pradesh">Himachal Pradesh</option>
                                                    <option value="Jharkhand">Jharkhand</option>
                                                    <option value="Karnataka">Karnataka</option>
                                                    <option value="Kerala">Kerala</option>
                                                    <option value="Madhya Pradesh">Madhya Pradesh</option>
                                                    <option value="Maharashtra">Maharashtra</option>
                                                    <option value="Manipur">Manipur</option>
                                                    <option value="Meghalaya">Meghalaya</option>
                                                    <option value="Mizoram">Mizoram</option>
                                                    <option value="Nagaland">Nagaland</option>
                                                    <option value="Odisha">Odisha</option>
                                                    <option value="Punjab">Punjab</option>
                                                    <option value="Rajasthan">Rajasthan</option>
                                                    <option value="Sikkim">Sikkim</option>
                                                    <option value="Tamil Nadu">Tamil Nadu</option>
                                                    <option value="Telangana">Telangana</option>
                                                    <option value="Tripura">Tripura</option>
                                                    <option value="Uttar Pradesh">Uttar Pradesh</option>
                                                    <option value="Uttarakhand">Uttarakhand</option>
                                                    <option value="West Bengal">West Bengal</option>
                                                </select>
                                                <span id="editStateError" class="error"></span>
                                            </div>
                                        </div>
                                        <div class="mb-3">
                                            <input type="text" id="addressLandMarkInput" class="form-control" name="landMark" placeholder="Landmark (Optional)">
                                        </div>
                                        <div class="mb-3">
                                            <input type="tel" id="addressAltPhoneInput" class="form-control" name="altPhone" placeholder="Alternate Phone (Optional)">
                                        </div>
                                        <div class="mb-3">
                                            <input type="email" id="addressEmailInput" class="form-control" name="email" placeholder="Email" >
                                            <span id="editEmailError" class="error"></span>
                                        </div>
                                        <label class="form-label">Address Type</label>
                                        <div>
                                            <div class="form-check form-check-inline">
                                                <input class="form-check-input" type="radio" name="addressType" id="home" value="home" >
                                                <label class="form-check-label" for="home">Home</label>
                                            </div>
                                            <div class="form-check form-check-inline">
                                                <input class="form-check-input" type="radio" name="addressType" id="work" value="work">
                                                <label class="form-check-label" for="work">Work</label>
                                            </div>
                                            <div class="form-check form-check-inline">
                                                <input class="form-check-input" type="radio" name="addressType" id="other" value="other">
                                                <label class="form-check-label" for="other">Other</label>
                                            </div>
                                            <span id="editAddressTypeError" class="error"></span>
                                        </div>
                                        <button type="submit" id="saveChangesAddressFormButton" class="btn btn-primary">Save Address</button>
                                        <button type="button" id="cancelEditAddressFormButton" class="btn btn-secondary">Cancel</button>
                                    </form>
                                </div>









                                <div id="mainContainer" style="margin-top: 20px;">
                                <% if (!addressDetails || addressDetails.length === 0) { %>
                                    <p>No address available</p>
                                <% } else { %>
                                    <% addressDetails.forEach(address => { %>
                                <div class="card" style="margin-bottom: 20px;" id="addressContainer<%=address._id%>">
                                   
                                    <div class="card-body">
                                        
                                        <div class="d-flex justify-content-between align-items-start">
                                            <div class="address-container">
                                               
                                                        <div class="address-card">
                                                            <span class="badge bg-secondary mb-2"><%= address.addressType %></span>
                                                            <h5 class="card-title mb-1"><%= address.name %></h5>
                                                            <p class="card-text mb-1"><%= address.phone %></p>
                                                            <p class="card-text">
                                                                <%= address.address %>, <%= address.locality %>, <%= address.cityDistTown %>, <%= address.state %> - <%= address.pincode %>
                                                            </p>
                                                            <% if (address.landMark) { %>
                                                                <p class="card-text mb-1">Landmark: <%= address.landMark %></p>
                                                              <% } else { %>
                                                                <p class="card-text mb-1">Landmark: Not provided</p>
                                                              <% } %>
                                                              
                                                            <% if (address.altPhone) { %>
                                                                <p class="card-text mb-1">Alternate Phone: <%= address.altPhone %></p>
                                                              <% } else { %>
                                                                <p class="card-text mb-1">Alternate Phone: Not provided</p>
                                                              <% } %>
                                                              
                                                            <p class="card-text mb-1">Email: <%= address.email %></p>
                                                        </div>
                                                   
                                            </div>
                                            <div class="dropdown">
                                                <a href="#" data-bs-toggle="dropdown">
                                                    <svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round">
                                                        <!-- SVG Path for the three dots icon -->
                                                        <circle cx="12" cy="5" r="1"></circle>
                                                        <circle cx="12" cy="12" r="1"></circle>
                                                        <circle cx="12" cy="19" r="1"></circle>
                                                    </svg>
                                                </a>
                                                <div class="dropdown-menu">
                                                    <a onclick="editAddress('<%=address._id%>','<%= address.addressType %>','<%= address.name %>','<%= address.phone %>','<%= address.address %>','<%= address.locality %>','<%= address.cityDistTown %>','<%= address.state %>','<%= address.pincode %>','<%= address.landMark %>','<%= address.altPhone %>','<%= address.email %>')"  class="dropdown-item" >Edit info</a>
                                                    <a  onclick="removeAddress('<%=address._id%>')" class="dropdown-item text-danger" >Delete</a>
                                                </div>
                                            </div>
                                            <!-- dropdown //end -->
                                            
                                        </div>
                                       
                                    </div>
                                   
                                </div>
                                <% }) %>
                                <% } %>

                            </div>
                            </div>
                        </div>
                        
                        
                    </div>
                </div>
            </div>
        </div>
    </section>
</main>
<script>



 //for showing the add address button
 const editAddress = (id,addressType,addressName,addressPhone,address,addressLocality,addressCityDistTown,addressState,addressPincode,addressLandMark,addressAltPhone,addressEmail) =>{

    const addressNameInput = document.getElementById('addressNameInput');
    const addressPhoneInput = document.getElementById('addressPhoneInput');
    const addressPincodeInput = document.getElementById('addressPincodeInput');
    const addressLocalityInput = document.getElementById('addressLocalityInput');
    const addressTextAreaInput = document.getElementById('addressTextAreaInput');
    const addressCityDistTownInput = document.getElementById('addressCityDistTownInput');
    const addressStateInput = document.getElementById('addressStateInput');
    const addressLandMarkInput = document.getElementById('addressLandMarkInput');
    const addressAltPhoneInput = document.getElementById('addressAltPhoneInput');
    const addressEmailInput = document.getElementById('addressEmailInput');
    const addressTypeHome = document.getElementById('home');
    const addressTypeWork = document.getElementById('work');
    const addressTypeOther = document.getElementById('other');

    const editNameError = document.getElementById('editNameError')
    const editPhoneError = document.getElementById('editPhoneError')
    const editPincodeError = document.getElementById('editPincodeError')
    const editLocalityError = document.getElementById('editLocalityError')
    const editAddressError = document.getElementById('editAddressError')
    const editCityDistTownError = document.getElementById('editCityDistTownError')
    const editStateError = document.getElementById('editStateError')
    const editEmailError = document.getElementById('editEmailError')
    const editAddressTypeError = document.getElementById('editAddressTypeError')



    const validateEditName = () => {
                    if (addressNameInput.value.trim() === '') {
                        editNameError.textContent = '* Name is required';
                        return false;
                    } else if (!/^[a-zA-Z\s]+$/.test(addressNameInput.value.trim())) { 
                        editNameError.textContent = '* Name must contain only letters';
                        return false
                    } else if (addressNameInput.value.trim().length < 2) {
                        editNameError.textContent = '* Name must be at least 2 characters long';
                        return false;
                    } else {
                        editNameError.textContent = '';
                        return true;
                    }
                };

                const validateEditPhone = () => {
                    const phoneRegex = /^\d{10}$/;
                    if (addressPhoneInput.value.trim() === '') {
                        editPhoneError.textContent = '* Phone Number is required';
                        return false;
                    } else if (!phoneRegex.test(addressPhoneInput.value.trim())) {
                        editPhoneError.textContent = '* Enter a valid Phone Number';
                        return false;
                    } else {
                        editPhoneError.textContent = '';
                        return true;
                    }
                };

                const validateEditPincode = () => {
                    const pincodeRegex = /^\d{6}$/;
                    if (addressPincodeInput.value.trim() === '') {
                        editPincodeError.textContent = '* Pincode is required';
                        return false;
                    } else if (!pincodeRegex.test(addressPincodeInput.value.trim())) {
                        editPincodeError.textContent = '* Enter a valid Pincode';
                        return false;
                    } else {
                        editPincodeError.textContent = '';
                        return true;
                    }
                };

                const validateEditLocality = () => {
                    if (addressLocalityInput.value.trim() === '') {
                        editLocalityError.textContent = '* Locality is required';
                        return false;
                    }else if (addressLocalityInput.value.trim().length < 5) {
                        editLocalityError.textContent = '* Locality must be at least 5 characters long';
                        return false;
                    } else if (!/^[a-zA-Z\s]+$/.test(addressLocalityInput.value.trim())) { 
                        editLocalityError.textContent = '* Locality can only contain letters';
                        return false;
                    }
                     else {
                        editLocalityError.textContent = '';
                        return true;
                    }
                };

                const validateEditAddress = () => {
                    if (addressTextAreaInput.value.trim() === '') {
                        editAddressError.textContent = '* Address is required';
                        return false;
                    } else if (addressTextAreaInput.value.trim().length < 5) {
                        editAddressError.textContent = '* Address must be at least 5 characters long';
                        return false
                    }else {
                        editAddressError.textContent = '';
                        return true;
                    }
                };

                const validateEditCityDistTown = () => {
                    if (addressCityDistTownInput.value.trim() === '') {
                        editCityDistTownError.textContent = '* City/District/Town is required';
                        return false;
                    } else {
                        editCityDistTownError.textContent = '';
                        return true;
                    }
                };

                const validateEditState = () => {
                    if (addressStateInput.value === '') {
                        editStateError.textContent = '* State is required';
                        return false;
                    } else {
                        editStateError.textContent = '';
                        return true;
                    }
                };

                const validateEditEmail = () => {
                    const emailRegex = /^[^\s@]+@[^\s@]+\.[^\s@]+$/;
                    if (addressEmailInput.value.trim() === '') {
                        editEmailError.textContent = '* Email is required';
                        return false;
                    } else if (!emailRegex.test(addressEmailInput.value.trim())) {
                        editEmailError.textContent = '* Enter a valid Email';
                        return false;
                    } else {
                        editEmailError.textContent = '';
                        return true;
                    }
                };

                const validateEditAddressType = () => {
                    const isChecked = [addressTypeHome, addressTypeWork, addressTypeOther].some(input => input.checked);
                    if (!isChecked) {
                        editAddressTypeError.textContent = '* Address Type is required';
                        return false;
                    } else {
                        editAddressTypeError.textContent = '';
                        return true;
                    }
                };

                addressNameInput.addEventListener('input', validateEditName);
                addressPhoneInput.addEventListener('input', validateEditPhone);
                addressPincodeInput.addEventListener('input', validateEditPincode);
                addressLocalityInput.addEventListener('input', validateEditLocality);
                addressTextAreaInput.addEventListener('input', validateEditAddress);
                addressCityDistTownInput.addEventListener('input', validateEditCityDistTown);
                addressStateInput.addEventListener('change', validateEditState);
                addressEmailInput.addEventListener('input', validateEditEmail);
                [addressTypeHome, addressTypeWork, addressTypeOther].forEach(input => input.addEventListener('change', validateEditAddressType));

    const editAddressForm = document.getElementById('editAddressForm')
    const addressListingContainer = document.getElementById('mainContainer');
    const cancelEditAddressFormButton = document.getElementById('cancelEditAddressFormButton');




                   
    addressNameInput.value = addressName;
    addressPhoneInput.value = addressPhone;
    addressPincodeInput.value = addressPincode;
    addressLocalityInput.value = addressLocality;
    addressTextAreaInput.value = address;
    addressCityDistTownInput.value = addressCityDistTown;
    addressStateInput.value = addressState;
    addressLandMarkInput.value = addressLandMark;
    addressAltPhoneInput.value = addressAltPhone;
    addressEmailInput.value = addressEmail;

    if (addressType === 'home') {

        addressTypeHome.checked = true;

    } else if (addressType === 'work') {

        addressTypeWork.checked = true;

    } else {

        addressTypeOther.checked = true;

    }

    addressListingContainer.style.display = 'none';
    editAddressForm.style.display = 'block';

    const saveChangesAddressFormButton = document.getElementById('saveChangesAddressFormButton');
    
    saveChangesAddressFormButton.addEventListener("click",(event)=>{

        event.preventDefault()

        const isNameValid = validateEditName();
                    const isPhoneValid = validateEditPhone();
                    const isPincodeValid = validateEditPincode();
                    const isLocalityValid = validateEditLocality();
                    const isAddressValid = validateEditAddress();
                    const isCityDistTownValid = validateEditCityDistTown();
                    const isStateValid = validateEditState();
                    const isEmailValid = validateEditEmail();
                    const isAddressTypeValid = validateEditAddressType();

                    if (!(isNameValid && isPhoneValid && isPincodeValid && isLocalityValid && isAddressValid && isCityDistTownValid && isStateValid && isEmailValid && isAddressTypeValid)) {

                        return;
                    }

        Swal.fire({
             
                text: 'Are you sure ? You want to save these changes.',
                showCancelButton: true,
                confirmButtonColor: '#000000',
                cancelButtonColor: '#ffffff',
                confirmButtonText: 'Yes, save it!',
                cancelButtonText: 'No, cancel!',
                customClass: {
                    confirmButton: 'swal1-confirm',
                    cancelButton: 'swal1-cancel'
                },
            }).then((result)=>{


                if(result.isConfirmed){

                    

            const updatedAddress = {
                id,
                addressType:document.querySelector('input[name="addressType"]:checked').value,
                name: addressNameInput.value,
                phone: addressPhoneInput.value,
                address: addressTextAreaInput.value,
                locality: addressLocalityInput.value,
                cityDistTown: addressCityDistTownInput.value,
                state: addressStateInput.value,
                pincode: addressPincodeInput.value,
                landMark: addressLandMarkInput.value,
                altPhone: addressAltPhoneInput.value,
                email: addressEmailInput.value
            }

            fetch(`/editAddress`,{

                method:"PUT",
                headers:{

                    'Content-Type': 'application/json',

                },
                body:JSON.stringify({updatedAddress,id})

            }).then(response => {
    
                if (!response.ok) {
                throw new Error(`HTTP error! Status: ${response.status}`);
                }
                
                return response.json();

            }).then((data)=>{



                if(data.success){

                    updateNewAddress(id, data.updatedUserAddress);
                    Swal.fire({
                            icon: 'success',
                            text: `${data.updatedUserAddress.addressType} address successfully updated.`,
                            toast: true,
                            position: 'top-right',
                            showConfirmButton: false,
                            timerProgressBar: true,
                            timer: 3000
                        });
                    }


                editAddressForm.style.display = 'none';
                addressListingContainer.style.display = 'block';

                }).catch((error)=>{

                console.log(`Error while fetching the data`, error.message)

                Swal.fire({
                        icon: 'error',
                        text: `An error occurred: ${error.message}`,
                        toast: true,
                        position: 'top-right',
                        showConfirmButton: false,
                        timerProgressBar: true,
                        timer: 3000
                    });
                })
                }
            })
    })
    cancelEditAddressFormButton.addEventListener("click", () => {
        editAddressForm.style.display = 'none';
        addressListingContainer.style.display = 'block';
    });               
 } 
 const updateNewAddress = (id,updatedUserAddress) => {
    document.getElementById(`addressContainer${id}`).innerHTML = `
        <div class="card-body">
            <div class="d-flex justify-content-between align-items-start">
                <div class="address-container">
                    <div class="address-card">
                        <span class="badge bg-secondary mb-2">${updatedUserAddress.addressType}</span>
                        <h5 class="card-title mb-1">${updatedUserAddress.name}</h5>
                        <p class="card-text mb-1">${updatedUserAddress.phone}</p>
                        <p class="card-text">${updatedUserAddress.address}, ${updatedUserAddress.locality}, ${updatedUserAddress.cityDistTown}, ${updatedUserAddress.state} - ${updatedUserAddress.pincode}</p>
                        <p class="card-text mb-1">Landmark: ${updatedUserAddress.landMark}</p>
                        <p class="card-text mb-1">Alternate Phone: ${updatedUserAddress.altPhone}</p>
                        <p class="card-text mb-1">Email: ${updatedUserAddress.email}</p>
                    </div>
                </div>
                <div class="dropdown">
                    <a href="#" data-bs-toggle="dropdown">
                        <svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round">
                            <circle cx="12" cy="5" r="1"></circle>
                            <circle cx="12" cy="12" r="1"></circle>
                            <circle cx="12" cy="19" r="1"></circle>
                        </svg>
                    </a>
                    <div class="dropdown-menu">
                        <a onclick="editAddress('${updatedUserAddress._id}', '${updatedUserAddress.addressType}', '${updatedUserAddress.name}', '${updatedUserAddress.phone}', '${updatedUserAddress.address}', '${updatedUserAddress.locality}', '${updatedUserAddress.cityDistTown}', '${updatedUserAddress.state}', '${updatedUserAddress.pincode}', '${updatedUserAddress.landMark}', '${updatedUserAddress.altPhone}', '${updatedUserAddress.email}')" class="dropdown-item">Edit info</a>
                        <a onclick="removeAddress('${updatedUserAddress._id}')" class="dropdown-item text-danger">Delete</a>
                    </div>
                </div>
            </div>
        </div>
    `;
};      

        const removeAddress = (addressId) =>{

            Swal.fire({
            text: 'Are you sure ? You want to delete this address.',
            showCancelButton: true,
            confirmButtonColor: '#000000',
            cancelButtonColor: '#ffffff',
            confirmButtonText: 'Yes, delete it!',
            cancelButtonText: 'No, cancel!',
            customClass: {
                    confirmButton: 'swal1-confirm',
                    cancelButton: 'swal1-cancel'
                },
        }).then((result)=>{

            if(result.isConfirmed){

                fetch(`/address`,{

                    method:"DELETE",
                    headers:{

                        "Content-Type":"application/json"
                    },
                    body:JSON.stringify({addressId})
                    }).then((response)=>{

                    if(!response.ok){

                        throw new Error("Network response was not ok")
                    }

                    return response.json()
                }).then((data)=>{
  
                if(data.isAddressEmpty===0){

                    document.getElementById('mainContainer').innerHTML = '<p>No address available</p>';

                }

                document.getElementById(`addressContainer${addressId}`).remove();

                Swal.fire({
                    icon: 'success',
                    text: 'Your address has been deleted.',
                    toast: true,
                    position: 'top-right',
                    showConfirmButton: false,
                    timerProgressBar: true,
                    timer: 3000
                });
                }).catch((error)=>{

                console.log(`error while fetching the data`,error.message);

                Swal.fire({
                    icon: 'error',
                    text: `An error occurred: ${error.message}`,
                    toast: true,
                    position: 'top-right',
                    showConfirmButton: false,
                    timerProgressBar: true,
                    timer: 3000
                });

                })

            }
        })
            
    }



  
</script>
<%- include('../layouts/userLayouts/footer') %>