<%- include('../layouts/adminLayouts/header') %>
  <div class="screen-overlay"></div>
  <%- include('../layouts/adminLayouts/sidebar') %>
    <main class="main-wrap">
      <%- include('../layouts/adminLayouts/searchbar') %>
        <style>
          .error {
            font-size: 0.8em;
            color: red;
          }

          .small-text {
            font-size: 0.8em;
            line-height: 1.2;
          }
        </style>

        <section class="content-main">
          <div class="content-header">
            <div>
              <h2 class="content-title card-title">Categories</h2>
              <p>Dashboard > Category & Brand</p>
              <p>Add, edit or delete a category</p>
            </div>
            <div>
              <input type="text" placeholder="Search Categories" class="form-control bg-white" />
            </div>
          </div>
          <div class="card">
            <div class="card-body">
              <div class="row">
                <div class="col-md-3">
                  <form action="/admin/brandCategoryManagement" id="formDataCreateCategory" method="post">
                    <!-- Hidden input field for category ID -->

                    <div class="mb-4">

                      <label for="categoryName" class="form-label">Name</label>
                      <input type="text" name="cName" placeholder="Type here" class="form-control" id="categoryName" />
                      <span id="categoryNameError" class="error"></span>
                    </div>
                    <div class="mb-4">
                      <label class="form-label">Description</label>
                      <textarea name="cDescription" id="categoryDescription" placeholder="Type here"
                        class="form-control"></textarea>
                      <span id="categoryDescriptionError" class="error"></span>
                    </div>
                    <div class="d-grid">
                      <button type="submit" id="createCategoryFormButton" class="btn btn-primary">
                        Create category
                      </button>
                      <button type="button" id="saveChangesCategoryFormButton" class="btn btn-primary"
                        style="display: none;">
                        Save Changes
                      </button>
                    </div>
                  </form>
                </div>
                <div class="col-md-9">
                  <div class="table-responsive">
                    <table class="table table-hover">
                      <thead>
                        <tr>
                          <th class="text-center">No</th>
                          <th>ID</th>
                          <th>Name</th>
                          <th>Description</th>
                          <th class="text-center">Action</th>
                        </tr>
                      </thead>
                      <tbody id="categoriesTbody">
                        <%if(categoriesData.length>0){ %> <% for(let i=0; i < categoriesData.length ; i++) {%>
                            <tr id="categoryRow<%= categoriesData[i]._id %>">
                              <td class="text-center">
                                <%= [i +1] %>
                              </td>
                              <td>
                                <%= categoriesData[i]._id %>
                              </td>

                              <td class="cName">
                                <%= categoriesData[i].name %>
                              </td>
                              <td class="cDes">
                                <%= categoriesData[i].description %>
                              </td>

                              <td class="text-end">
                                <div class="d-flex justify-content-end">
                                  <button
                                    onclick="editCategory('<%= categoriesData[i]._id %>','<%= categoriesData[i].name %>','<%= categoriesData[i].description %>')"
                                    id="editCategoryButton" type="button"
                                    class="btn btn-light rounded btn-sm font-sm flex-fill mx-1 editCategory">
                                    Edit info
                                  </button>

                                  <% if(categoriesData[i].isBlocked) { %>

                                    <button onclick="softDeleteCategory('<%= categoriesData[i]._id %>')"
                                      id="softDeleteButton<%= categoriesData[i]._id %>"
                                      class="btn btn-success rounded btn-sm font-sm flex-fill mx-1">
                                      List
                                    </button>

                                    <% } else { %>

                                      <button onclick="softDeleteCategory('<%= categoriesData[i]._id %>')"
                                        id="softDeleteButton<%= categoriesData[i]._id %>"
                                        class="btn btn-danger rounded btn-sm font-sm flex-fill mx-1">
                                        Unlist
                                      </button>

                                      <% } %>
                                </div>
                              </td>
                            </tr>
                            <%}%>
                              <%} else { %>
                                <tr></tr>
                                <tr>
                                  <td colspan="5">No Categories Found</td>
                                </tr>
                                <%}%>
                      </tbody>
                    </table>
                  </div>
                </div>
                <!-- .col// -->
              </div>
              <!-- .row // -->
            </div>
            <!-- card body .// -->
          </div>



























          <!-- card .// -->
          <div class="content-header">
            <div>
              <h2 class="content-title card-title">Brands</h2>
              <p>Add, edit or delete a brand</p>
            </div>
            <div>
              <input type="text" placeholder="Search Brands" class="form-control bg-white" />
            </div>
          </div>
          <div class="card">
            <div class="card-body">
              <div class="row">
                <div class="col-md-3">
                  <form action="/admin/brandCategoryManagement" id="formDataCreateBrand" method="post">
                    <div class="mb-4">
                      <label for="brandName" class="form-label">Name</label>
                      <input type="text" name="bName" placeholder="Type here" class="form-control" id="brandName" />
                      <span id="brandNameError" class="error"></span>
                    </div>
                    <div class="d-grid">
                      <button type="submit" id="createBrandFormButton" class="btn btn-primary">
                        Create brand
                      </button>
                      <button type="button" id="saveChangesBrandFormButton" class="btn btn-primary"
                        style="display: none;">
                        Save Changes
                      </button>
                    </div>
                  </form>
                </div>
                <div class="col-md-9">
                  <div class="table-responsive">
                    <table class="table table-hover">
                      <thead>
                        <tr>
                          <th class="text-center">No</th>
                          <th>ID</th>
                          <th>Name</th>
                          <th class="text-center">Action</th>
                        </tr>
                      </thead>
                      <tbody id="brandsTbody">
                        <%if(brandsData.length>0){ %> <% for(let i=0; i < brandsData.length ; i++) {%>
                            <tr id="brandRow<%= brandsData[i]._id %>">
                              <td class="text-center">
                                <%= [i +1] %>
                              </td>
                              <td>
                                <%= brandsData[i]._id %>
                              </td>
                              <td class="bName">
                                <%= brandsData[i].name %>
                              </td>
                              <td class="text-end">
                                <div class="d-flex justify-content-end">
                                  <button onclick="editBrand('<%= brandsData[i]._id %>','<%= brandsData[i].name %>')"
                                    id="editBrandButton" type="button"
                                    class="btn btn-light rounded btn-sm font-sm flex-fill mx-1 editBrand">
                                    Edit info
                                  </button>
                                  <% if(brandsData[i].isBlocked) { %>

                                    <button onclick="softDeleteBrand('<%=  brandsData[i]._id %>')"
                                      id="softDeleteButton<%=  brandsData[i]._id %>"
                                      class="btn btn-success rounded btn-sm font-sm flex-fill mx-1">
                                      List
                                    </button>

                                    <% } else { %>

                                      <button onclick="softDeleteBrand('<%=  brandsData[i]._id %>')"
                                        id="softDeleteButton<%=  brandsData[i]._id %>"
                                        class="btn btn-danger  rounded btn-sm font-sm flex-fill mx-1">
                                        Unlist
                                      </button>

                                      <% } %>
                                </div>
                              </td>
                            </tr>
                            <%}%>
                              <%} else { %>
                                <tr></tr>
                                <tr>
                                  <td colspan="5">No brands Found</td>
                                </tr>
                                <%}%>
                      </tbody>
                    </table>
                  </div>
                </div>
                <!-- .col// -->
              </div>
              <!-- .row // -->
            </div>
            <!-- card body .// -->
          </div>
          <!-- card .// -->










































          
        </section>
        <!-- content-main end// -->

        <script>
          //soft deleting the categories

          const softDeleteCategory = (categoryId) => {
            const deleteButton = document.getElementById(
              `softDeleteButton${categoryId}`
            );
            const isDeleting = deleteButton.classList.contains("btn-danger");

            Swal.fire({
              title: `Are you sure you want to ${isDeleting ? 'Unlist' : 'List'
                } this category?`,
              icon: "warning",
              showCancelButton: true,
              confirmButtonColor: "#3085d6",
              cancelButtonColor: "#d33",
              confirmButtonText: `Yes, ${isDeleting ? 'Unlist' : 'List'}`
            }).then((result) => {
              if (result.isConfirmed) {
                fetch(
                  `http://localhost:7000/admin/brandCategoryManagement/?categoryId=${categoryId}`,
                  {
                    method: "PATCH",
                    headers: {
                      "Content-Type": "application/json",
                    },
                  }
                )
                  .then((response) => {
                    if (response.status !== 200) {
                      throw new Error("Network response was not ok");
                    }

                    return response.json();
                  })
                  .then((data) => {
                    const deleteButton = document.getElementById(
                      `softDeleteButton${categoryId}`
                    );

                    if (data.categoryId.isBlocked) {
                      deleteButton.classList.remove("btn-danger");
                      deleteButton.classList.add("btn-success");
                      deleteButton.textContent = "List";
                      Swal.fire({
                        icon: 'success',
                        title: 'Unlist!',
                        text: 'Successfully deleted category',
                        toast: true,
                        position: 'top-right',
                        showConfirmButton: false,
                        timerProgressBar: true,
                        timer: 3000
                      });
                    } else {
                      deleteButton.classList.remove("btn-success");
                      deleteButton.classList.add("btn-danger");
                      deleteButton.textContent = "Unlist";
                      Swal.fire({
                        title: 'Retrieved!',
                        text: 'Category has been retrieved.',
                        icon: 'success',
                        toast: true,
                        position: 'top-right',
                        showConfirmButton: false,
                        timerProgressBar: true,
                        timer: 3000
                      });

                    }
                  })
                  .catch((error) => {
                    console.log(`There is a problem with the fetch operation`, error);

                    Swal.fire({
                      title: "Error!",
                      text: "There was a problem deleting the category.",
                      icon: "error",
                      toast: true,
                      position: "top-right",
                      showConfirmButton: false,
                      timerProgressBar: true,
                      timer: 3000
                    });

                  });
              }
            });
          };

          //soft deleting brand

          const softDeleteBrand = (brandId) => {
            const deleteButton = document.getElementById(
              `softDeleteButton${brandId}`
            );
            const isDeleting = deleteButton.classList.contains("btn-danger");

            Swal.fire({
              title: `Are you sure you want to ${isDeleting ? 'Unlist' : 'List'} this Brand ?`,

              icon: "warning",
              showCancelButton: true,
              confirmButtonColor: "#3085d6",
              cancelButtonColor: "#d33",
              confirmButtonText: `Yes, ${isDeleting ? 'Unlist' : 'List'}`
            }).then((result) => {
              if (result.isConfirmed) {
                fetch(
                  `http://localhost:7000/admin/brandCategoryManagement/?brandId=${brandId}`,
                  {
                    method: "PATCH",
                    headers: {
                      "Content-Type": "application/json",
                    },
                  }
                )
                  .then((response) => {
                    if (response.status != 200) {
                      throw new Error("Network response was not ok");
                    }

                    return response.json();
                  })
                  .then((data) => {
                    const deleteButton = document.getElementById(
                      `softDeleteButton${brandId}`
                    );

                    if (data.brandId.isBlocked) {
                      deleteButton.classList.remove("btn-danger");
                      deleteButton.classList.add("btn-success");
                      deleteButton.textContent = "List";

                      Swal.fire({
                        title: "Deleted!",
                        text: "Successfully deleted Brand",
                        icon: "success",
                        toast: true,
                        position: "top-right",
                        showConfirmButton: false,
                        timerProgressBar: true,
                        timer: 3000
                      });

                    } else {
                      deleteButton.classList.remove("btn-success");
                      deleteButton.classList.add("btn-danger");
                      deleteButton.textContent = "Unlist";
                      Swal.fire({
                        title: "Retrieved!",
                        text: "Brand has been retrieved.",
                        icon: "success",
                        toast: true,
                        position: "top-right",
                        showConfirmButton: false,
                        timerProgressBar: true,
                        timer: 3000
                      });
                    }
                  })
                  .catch((error) => {
                    console.log(`There is a problem with the fetch operation`, error);
                    Swal.fire({
                      title: "Error!",
                      text: "There was a problem deleting the Brand.",
                      icon: "error",
                      toast: true,
                      position: "top-right",
                      showConfirmButton: false,
                      timerProgressBar: true,
                      timer: 3000
                    });

                  });
              }
            });
          };

          //function for editing category
          const editCategory = (id, categoryName, categoryDescription) => {

            // console.log(id,categoryName,categoryDescription);

            const categoryNameInput = document.getElementById('categoryName')
            const catrgoryDescription = document.getElementById('categoryDescription')
            const createCategoryFormButton = document.getElementById('createCategoryFormButton')
            const saveChangesCategoryFormButton = document.getElementById('saveChangesCategoryFormButton')

            categoryNameInput.value = categoryName

            categoryDescriptionInput.value = categoryDescription

            createCategoryFormButton.style.display = 'none';
            saveChangesCategoryFormButton.style.display = 'block';

            if (saveChangesCategoryFormButton.style.display == 'block') {

              saveChangesCategoryFormButton.addEventListener("click", () => {

                Swal.fire({
                  title: 'Confirm Changes',
                  text: 'Are you sure you want to save these changes? This action cannot be undone.',
                  icon: 'warning',
                  showCancelButton: true,
                  confirmButtonText: 'Yes, save changes',
                  cancelButtonText: 'No, cancel',
                  reverseButtons: true
                }).then((result) => {

                  if (result.isConfirmed) {


                    const name = categoryNameInput.value
                    const description = categoryDescriptionInput.value
                    const categoryId = id

                    fetch(`http://localhost:7000/admin/brandCategoryManagement/`, {

                      method: "PUT",
                      headers: {

                        'Content-Type': 'application/json',

                      },
                      body: JSON.stringify({ name, description, categoryId })

                    }).then((response) => {

                      if (!response.ok) {

                        throw new Error("Network response was not ok")
                      }

                      return response.json()

                    }).then((data) => {

                      console.log(`data received`, data);

                      const row = document.querySelector(`#categoryRow${categoryId}`);

                      if (row) {

                        row.querySelector('.cName').innerHTML = name
                        row.querySelector('.cDes').innerHTML = description

                        categoryNameInput.value = '';
                        categoryDescriptionInput.value = '';
                        createCategoryFormButton.style.display = 'block';
                        saveChangesCategoryFormButton.style.display = 'none';

                        Swal.fire({
                          title: 'Updated!',
                          text: 'Category has been updated successfully.',
                          icon: 'success',
                          toast: true,
                          position: 'top-right',
                          showConfirmButton: false,
                          timerProgressBar: true,
                          timer: 3000
                        });
                      }

                    }).catch((error) => {

                      console.error('Error:', error.message);

                      Swal.fire({
                        title: 'Error!',
                        text: `There was a problem updating the category: ${error.message}`,
                        icon: 'error',
                        toast: true,
                        position: 'top-right',
                        showConfirmButton: false,
                        timerProgressBar: true,
                        timer: 3000
                      });

                    })

                  }

                })

              })

            }

          }


          const editBrand = (id, brandName) => {

            const brandNameInput = document.getElementById('brandName')
            const createBrandFormButton = document.getElementById('createBrandFormButton')
            const saveChangesBrandFormButton = document.getElementById('saveChangesBrandFormButton')


            brandNameInput.value = brandName

            createBrandFormButton.style.display = 'none'

            saveChangesBrandFormButton.style.display = 'block'

            if (saveChangesBrandFormButton.style.display == 'block') {

              saveChangesBrandFormButton.addEventListener("click", () => {
                Swal.fire({
                  title: 'Confirm Changes',
                  text: 'Are you sure you want to save these changes? This action cannot be undone.',
                  icon: 'warning',
                  showCancelButton: true,
                  confirmButtonText: 'Yes, save changes',
                  cancelButtonText: 'No, cancel',
                  reverseButtons: true

                }).then((result) => {

                  if (result.isConfirmed) {

                    const name = brandNameInput.value
                    const brandId = id

                    fetch(`http://localhost:7000/admin/brandCategoryManagement/`, {

                      method: "PUT",
                      headers: {

                        'Content-Type': 'application/json',

                      },

                      body: JSON.stringify({ name, brandId })

                    }).then((response) => {

                      if (!response.ok) {

                        throw new Error("Network response was not ok")
                      }
                      return response.json()
                    }).then((data) => {

                      console.log(`data received`, data);

                      const row = document.querySelector(`#brandRow${brandId}`)

                      if (row) {

                        row.querySelector('.bName').innerHTML = name

                        brandNameInput.value = '';

                        createBrandFormButton.style.display = 'block';
                        saveChangesBrandFormButton.style.display = 'none';

                        Swal.fire({
                          title: 'Success!',
                          text: 'Brand has been updated successfully.',
                          icon: 'success',
                          toast: true,
                          position: 'top-right',
                          showConfirmButton: false,
                          timerProgressBar: true,
                          timer: 3000
                        });

                      }

                    }).catch(error => {


                      Swal.fire({
                        title: 'Error!',
                        text: `There was a problem updating the brand: ${error.message}`,
                        icon: 'error',
                        toast: true,
                        position: 'top-right',
                        showConfirmButton: false,
                        timerProgressBar: true,
                        timer: 3000
                      });


                    })


                  }


                })


              })
            }

          }

          //category adding category done using backend

          //form validation for adding new category

          const categoryNameInput = document.getElementById("categoryName");
          const categoryNameError = document.getElementById("categoryNameError");

          const validateCategoryName = () => {
            if (categoryNameInput.value.trim() === "") {
              categoryNameError.textContent = "* Category Name is required";
              return false;
            }
            categoryNameError.textContent = "";
            return true;

          };

          categoryNameInput.addEventListener("input", validateCategoryName);

          const categoryDescriptionInput = document.getElementById(
            "categoryDescription"
          );
          const categoryDescriptionError = document.getElementById(
            "categoryDescriptionError"
          );

          const validateCategoryDescription = () => {
            if (categoryDescriptionInput.value.trim() === "") {
              categoryDescriptionError.textContent =
                "* Category is Description required";
              return false
            } else if (categoryDescriptionInput.value.trim().length < 5) {
              categoryDescriptionError.textContent =
                "* Description should be atleast 5 charactors";
              return false
            }
            categoryDescriptionError.textContent = "";
            return true

          }

          categoryDescriptionInput.addEventListener(
            "input",
            validateCategoryDescription
          );

          //checking for existing category 
          const categoryExists = async (categoryName) => {

            try {

              const encodedCName = encodeURIComponent(categoryName);

              const response = await fetch(`http://localhost:7000/admin/brandCategoryExists?encodedCName=${encodedCName}`, {

                method: "GET",
                headers: {

                  'Content-Type': 'application/json',

                }

              });

              if (!response.ok) {

                throw new Error("Network response was not ok");

              }
              const data = await response.json();

              return data.exists;

            } catch (error) {

              console.log(`error while checking the category existence`, error.message);

              throw error;

            }
          };


          const formDataCreateCategory = document.getElementById(
            "formDataCreateCategory");

          formDataCreateCategory.addEventListener("submit", async (event) => {

            event.preventDefault();

            const categoryName = categoryNameInput.value.trim();

            if (!validateCategoryName() || !validateCategoryDescription()) {
             
              return

            }

            try {
              const cExists = await categoryExists(categoryName);

              if (cExists) {
                Swal.fire({
                title: "Category Exists!",
                text: "A category with this name already exists.",
                icon: "warning",
                toast: true,
                position: 'top-right',
                showConfirmButton: false,
                timerProgressBar: true,
                timer: 3000
              });
                return;
              }


              formDataCreateCategory.submit();

            } catch (error) {

              console.error("error checking category existence:", error);

              Swal.fire({
              title: "Error",
              text: "An error occurred while checking the category. Please try again.",
              icon: "error",
              toast: true,
              position: 'top-right',
              showConfirmButton: false,
              timerProgressBar: true,
              timer: 3000
             });
            }
          });



          //brand adding category done using backend

          //form validation for adding new brand


          const brandNameInput = document.getElementById("brandName");
          const brandNameError = document.getElementById("brandNameError");

          const validateBrandName = () => {
            if (brandNameInput.value.trim() === "") {
              brandNameError.textContent = "* Brand Name is required";
              return false;
            } else if (brandNameInput.value.trim().length < 2) {
              brandNameError.textContent = "* Name should be atleast 2 charactors";
              return false
            } else {
              brandNameError.textContent = "";
              return true
            }
          };

          brandNameInput.addEventListener("input", validateBrandName);


          //checking for existing brand

          const brandExists = async (brandName) => {

            try {

              const encodedBName = encodeURIComponent(brandName);

              const response = await fetch(`http://localhost:7000/admin/brandCategoryExists?encodedBName=${encodedBName}`, {

                method: "GET",
                headers: {

                  'Content-Type': 'application/json',

                }

              });

              if (!response.ok) {

                throw new Error("Network response was not ok");

              }

              const data = await response.json();

              return data.exists;

            } catch (error) {

              console.log(`error while checking the category existence`, error.message);

              throw error;

            }

          };

          const formDataCreateBrand = document.getElementById(
            "formDataCreateBrand"
          );

          formDataCreateBrand.addEventListener("submit", async (event) => {

            event.preventDefault()

            const brandName = brandNameInput.value.trim();

            if (!validateBrandName()) {

              return

            }

            try {

              const bExists = await brandExists(brandName)

              if (bExists) {

                Swal.fire({
                title: "Brand Exists!",
                text: "A brand with this name already exists.",
                icon: "warning",
                toast: true,
                position: 'top-right',
                showConfirmButton: false,
                timerProgressBar: true,
                timer: 3000
              });
                return

              }

              formDataCreateBrand.submit()

            } catch (error) {

              console.log(`error checking brand existence:`, error);

              Swal.fire({
                  title: "Error",
                  text: "An error occurred while checking the brand. Please try again.",
                  icon: "error",
                  toast: true,
                  position: 'top-right',
                  showConfirmButton: false,
                  timerProgressBar: true,
                  timer: 3000
                });

            }

          });

        </script>
        <%- include('../layouts/adminLayouts/footer') %>
    </main>